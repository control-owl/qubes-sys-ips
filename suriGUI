#!/usr/bin/env bash
# coder: ro0t

set -o nounset      # Exit on undefined variable
set -o errexit      # Exit on non-zero status
set -o pipefail     # Pipe return exit status

trap 'echo "$BASH_COMMAND" failed with error code $?' ERR
trap exitSuriGUI EXIT SIGUSR1 SIGUSR2


function _GLOBAL_VARS()
{
  export _PROJECT_NAME="suriGUI"
  export _PROJECT_DESCRIPTION="GUI for Suricata IPS and Qubes OS"
  export _PROJECT_VER="1.2"
  export _PROJECT_BUILD="2022-02-07"

  export timeShort=$(date +"%H:%M:%S")
  export dateShort=$(date +"%Y-%m-%d")
  export dateLong=$(date +"%Y-%m-%d-%H-%M-%S")

  export _PROJECT_DIR="/usr/share/suriGUI"
  export _PROJECT_DIR_RES="$_PROJECT_DIR/res"
  export _PROJECT_DIR_TMP="$_PROJECT_DIR/tmp"
  export _PROJECT_DIR_LOG="$_PROJECT_DIR/log/$dateShort"
  export _PROJECT_DIR_CONF="$_PROJECT_DIR/conf"

  export _PROJECT_CONFIG_FILE="$_PROJECT_DIR_CONF/suriGUI.conf"
  export _NOTIF_IGNORE_LIST="$_PROJECT_DIR_CONF/ignore.sid"

  export _PROJECT_PIPE="$_PROJECT_DIR_TMP/suriGUI.pipe"
  export _SID_IGNORE_PIPE="$_PROJECT_DIR_TMP/SIDignore.pipe"
  export _SID_CUSTOM_PIPE="$_PROJECT_DIR_TMP/SIDcustom.pipe"

  export _PROJECT_ICON="$_PROJECT_DIR_RES/suriGUI.png"
  export _PROJECT_ICON_INACTIVE="$_PROJECT_DIR_RES/icons/inactive.png"
  export _PROJECT_ICON_ACTIVE="$_PROJECT_DIR_RES/icons/active.png"
  export _PROJECT_ICON_MENU_EXIT="$_PROJECT_DIR_RES/icons/exit.png"
  export _PROJECT_ICON_MENU_SETTINGS="$_PROJECT_DIR_RES/icons/settings.png"
  export _PROJECT_ICON_MENU_START="$_PROJECT_DIR_RES/icons/start.png"
  export _PROJECT_ICON_MENU_STOP="$_PROJECT_DIR_RES/icons/stop.png"
  export _PROJECT_ICON_MENU_UPDATE="$_PROJECT_DIR_RES/icons/update.png"

  export _SURICATA_CONFIG="$_PROJECT_DIR_CONF/suricata.yaml"
  export _SURICATA_RULES="$_PROJECT_DIR_CONF/suricata.rules"
  export _SURICATA_CUSTOM_RULES="$_PROJECT_DIR_CONF/suriGUI.rules"
  export _SURICATA_UPDATE_TIMESTAMP="$_SURICATA_RULES.timestamp"
  #export _SURICATA_OUTDATE="7"

  # export _SURICATA_PID="$_PROJECT_DIR_TMP/suricata.pid"
  export _PROJECT_PID="$_PROJECT_DIR_TMP/suriGUI.pid"
  export _NOTIF_PID="$_PROJECT_DIR_TMP/suriNotif.pid"
}

function exitSuriGUI()
{
  echo "EXITING..."

  stopNotifDaemon

  # log delete ?
  source "$_PROJECT_CONFIG_FILE"
  if [[ "$keep" != "TRUE" ]]
  then
    d3bug info "Deleting log files"
    rm "$_PROJECT_DIR_LOG" -R
  fi

  # Cleaning temp files
  find "$_PROJECT_DIR_TMP" -type p -name "*.pipe" -delete
  find "$_PROJECT_DIR_TMP" -type f -name "*.pid" -delete
  find "$_PROJECT_DIR_TMP" -type f -name "*.tab" -delete
  find "$_PROJECT_DIR_TMP" -type f -name "*.lock" -delete

  d3bug info "EXIT 0"
  # sudo pkill -f suriGUI
}

function d3bug()
{
  local type="${1:-*}"
  local msg="${2:-}"

  case "$type" in
    "info" )    echo "$(date +"%H:%M:%S")  |   |__ $msg" ;;
    "error" )   echo -e "$(date +"%H:%M:%S")  |__ \e[41;30m $msg \e[0m" ;;
    *)          echo "$(date +"%H:%M:%S")  |__ ${FUNCNAME[1]}" ;;
  esac
}

function checkProjectDirectories()
{
  d3bug

  local basicDirs=( "$_PROJECT_DIR"
                    "$_PROJECT_DIR_RES"
                    "$_PROJECT_DIR_TMP"
                    "$_PROJECT_DIR_LOG"
                    "$_PROJECT_DIR_CONF" )

  for dir in "${basicDirs[@]}"
  do
    if [[ ! -d "$dir" ]]
    then
      if mkdir -p "$dir"
      then
        d3bug info "Directory created: $dir"
      else
        d3bug error "Can not create directory: $dir"
        exit 1
      fi
    else
      d3bug info "Directory found: $dir"
    fi
  done
}

function readConfigFile()
{
  d3bug
  local config="$1"

  source "$_PROJECT_CONFIG_FILE"

  case "$config" in
    "actionMenu" )
      defaultActions="alert\!pass\!drop\!reject\!rejectsrc\!rejectdst\!rejectboth"
      makeDefault="^"
      export configActionMenu=$(echo "$defaultActions" | sed "s/$action/$makeDefault$action/g")
    ;;
    "update" ) export configUpdate="$update" ;;
    "timeout" ) export configTimeout="$timeout" ;;
    "duration" ) export configDuration="$duration" ;;
    "notifications" ) export configNotifications="$notifications" ;;
    "keep" ) export configKeep="$keep" ;;
    "action" ) export configAction="$action" ;;
    "notificationPositionMenu" )
    defaultPositions="Top_left\!Top_right\!Bottom_left\!Bottom_right"
    makeDefault="^"
    export configNotificationPositionMenu=$(echo "$defaultPositions" | sed "s/$position/$makeDefault$position/g")
    ;;
    "notificationPosition" ) export configNotificationPosition="$position" ;;
  esac

  d3bug info "Get config: $config"
}

function updateConfigFile()
{
  d3bug

  #updateConfigFile rules "$new" "$old"
  local component="$1"
  local newStatus="$2"
  local oldStatus="${3:-}"

  case "$component" in
    "rules" )
      d3bug info "Updating $component: $oldStatus -> $newStatus"

      sed -i "s/\<$oldStatus\>/$newStatus/" "$_SURICATA_RULES"
      checkSuricataStatus &>/dev/null

      if [[ "$suricataStatus" == "active" ]]
      then
        d3bug info "Starting Suricata reload..."
        sudo suricatasc -c reload-rules
        #sudo systemctl reload suricata #&>/dev/null
        d3bug info "Rules updated & reloaded"
      else
        d3bug info "Rules updated"
      fi
    ;;
    "action" )
      sed -i "s/^\(action\s*=\s*\).*\$/\1$newStatus/" "$_PROJECT_CONFIG_FILE"
      d3bug info "Rule action: $newStatus"
    ;;
  esac
}

function restartSuriGUI()
{
  d3bug

  d3bug info "Starting restart"
  pkill -f "suriGUI" && exec "suriGUI"

}

function send_notif()
{
  d3bug

  local type=${1:-Info}
  local cat=${2:-Category}
  local sig=${3:-Signature}
  local sid=${4:-SID}
  local src=${5:-SRC}
  local dest=${6:-DEST}
  local action=${7:-Action}
  local sidLockFile="$_PROJECT_DIR_TMP/$sid.lock"


  case "$type" in
    info )
      yad \
      --title="$_PROJECT_NAME v.$_PROJECT_VER" \
      --image="$_PROJECT_ICON" \
      --image-on-top \
      --button="Yes" --button="No" \
      --text="$cat" &
    ;;
    alert )
    if grep -q "$sid" "$_NOTIF_IGNORE_LIST"
    then
      d3bug info "Ignore SID: $sid"
    else
      if [[ ! -f "$sidLockFile" ]]
      then
        readConfigFile timeout
        readConfigFile notificationPosition

        case "$configNotificationPosition" in
          "Top_left" )      pos="--posx=1 --posy=1"  ;;
          "Top_right" )     pos="--posx=-1 --posy=1"  ;;
          "Bottom_left" )   pos="--posx=1 --posy=-1"  ;;
          * )               pos="--posx=-1 --posy=-1"  ;;
        esac

        touch "$sidLockFile"
        set +o errexit
        yad \
        --title="suriNotif" \
        --form --on-top --skip-taskbar ${pos:-}  \
        --timeout="$configTimeout" --timeout-indicator="top" \
        --window-icon="active" \
        --text="$sig" \
        --width=350 \
        --columns=2 \
        --align=right \
        --field="Date:RO" "$dateShort" \
        --field="Signature ID:RO" "$sid" \
        --field="Source IP:RO" "$src" \
        --field="Action:RO" "$action" \
        --field=".:LBL" "." \
        \
        --field="Time:RO" "$timeShort" \
        --field="Category:RO" "$cat" \
        --field="Destination IP:RO" "$dest" \
        --field=".:LBL" "." \
        \
        --button="Don't show again!error":10 \
        --button="Unblock!redo":20 \
        &>/dev/null
        ret=${?:-70}
        case "$ret" in
          10 )  ignoreSID "$sid"    ;;
          20 )  unblockSID "$sid"   ;;
          70 )  d3bug info "Timeout for notification: $sid"   ;;
          252 ) d3bug info "Escape key pressed"   ;;
          * )   :    ;;
        esac

        [[ -f "$sidLockFile" ]] && rm "$sidLockFile"
        set -o errexit
      fi
    fi
    ;;
  esac
}

function updateSuriGUI()
{
  d3bug

  d3bug info "Starting update"
  if [[ -d "$_PROJECT_DIR" ]]
  then
    cd "$_PROJECT_DIR"
    if git fetch
    then
      restartSuriGUI
    else
      d3bug info "No update found"
    fi
  fi
  d3bug info "Updating done"
  send_notif info "No update found"
}

function unblockSID()
{
  d3bug
  local sid="$1"

  # Comment SID in suricata rules, disable it
  sed -i "/^[^#]/ s/\(^.*$sid.*$\)/#\1/" "$_SURICATA_RULES"

  d3bug info "SID: $sid unblocked. Reloading rules..."
  sudo suricatasc -c reload-rules
  d3bug info "Done"
}

function ignoreSID()
{
  d3bug

  local sid="$1"
  local TXT="Disable notifications for SID: $sid ?\n"
  local TXT+="You will no longer see any info when SID is blocked."

  yad \
    --image="$_PROJECT_ICON" \
    --image-on-top \
    --width=450 \
    --title="$_PROJECT_NAME" \
    --button="Yes" --button="No" \
    --text="$TXT" \
  &>/dev/null
  ret=$?

  if [ "$ret" = 0 ]
  then
    if ! grep -q "$sid" "$_NOTIF_IGNORE_LIST"
    then
      d3bug info "Writing SID $sid in ignore list"
      echo "$sid" >> $_NOTIF_IGNORE_LIST
    else
      d3bug info "SID already in ignore list"
    fi
  else
    d3bug info "Nothing done"
  fi
}

function deleteIgnoredSID()
{
  d3bug

  # 1000000 | xxxxxxx (7)
  local sid="$1"

  yad --image="$_PROJECT_ICON" --image-on-top \
      --title="$_PROJECT_NAME" \
      --button="Yes" --button="No" \
      --text="Delete SID: $sid from Ignore list?" &>/dev/null
  ret=$?
  if [ $ret = 0 ]
  then
    sed -i "/$sid/d" "$_NOTIF_IGNORE_LIST"
    d3bug info "SID: $sid removed"
    exec 4<>$_SID_IGNORE_PIPE echo -e "\f" >&4 &
    exec 4<>$_SID_IGNORE_PIPE echo -e "$(cat $_NOTIF_IGNORE_LIST)" >&4 &
  else
    d3bug info "Nothing done"
  fi


}

function saveSettings()
{
  d3bug

  readarray -d '|' -t tab1 <<< $(cat $_PROJECT_DIR_TMP/suriGUI.tab)
  sed -i "s/^\(notifications\s*=\s*\).*\$/\1${tab1[0]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(timeout\s*=\s*\).*\$/\1${tab1[3]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(position\s*=\s*\).*\$/\1${tab1[6]}/" "$_PROJECT_CONFIG_FILE"

  readarray -d '|' -t tab2 <<< $(cat $_PROJECT_DIR_TMP/suricata.tab)
  sed -i "s/^\(IPS\s*=\s*\).*\$/\1${tab2[2]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(rules\s*=\s*\).*\$/\1${tab2[3]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(keep\s*=\s*\).*\$/\1${tab2[6]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(log\s*=\s*\).*\$/\1${tab2[7]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(duration\s*=\s*\).*\$/\1${tab2[8]}/" "$_PROJECT_CONFIG_FILE"

  readarray -d '|' -t tab3 <<< $(cat $_PROJECT_DIR_TMP/rules.tab)
  sed -i "s/^\(action\s*=\s*\).*\$/\1${tab3[0]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(update\s*=\s*\).*\$/\1${tab3[10]}/" "$_PROJECT_CONFIG_FILE"
}

function suriGUISettings()
{
  d3bug

  KEY="$RANDOM"

  readConfigFile notifications
  readConfigFile timeout
  readConfigFile keep
  readConfigFile duration
  readConfigFile notificationPositionMenu
  readConfigFile actionMenu
  readConfigFile update
  readConfigFile action


#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  yad \
    --plug="$KEY" \
    --tabnum=1 \
    --form \
    --field="Notifications":chk "$configNotifications" \
    --field="Enable pop-up messages when something is blocked":LBL "" \
    --field="":LBL "" \
    --field="Duration:NUM" "$configTimeout\!1..60\!1\!0" \
    --field="Notification duration in seconds":LBL "" \
    --field="":LBL "" \
    --field="Position":CB "$configNotificationPositionMenu" \
    --field="Notification pop-up position":LBL "" \
    > "$_PROJECT_DIR_TMP/suriGUI.tab" &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  yad \
    --plug="$KEY" \
    --tabnum=2 \
    --form \
    --field="":LBL "" \
    --field="<b>Config files</b>":LBL "" \
    --field="Suricata config:":FL "$_SURICATA_CONFIG" \
    --field="Suricata rules:":FL "$_SURICATA_RULES" \
    --field="":LBL "" \
    --field="<b>Log</b>":LBL "" \
    --field="Keep log":chk "$configKeep" \
    --field="Log directory:":dir "$_PROJECT_DIR_LOG" \
    --field="Log history (days):NUM" "$configDuration\!1..60\!1\!0" \
    --file-filter="Yaml files (*.yaml)| *.yaml" \
    --file-filter="Config Files (*.cfg *.conf)| *.cfg *.conf" \
    --file-filter="All Files | *.*" \
    > "$_PROJECT_DIR_TMP/suricata.tab" &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  yad \
    --plug="$KEY" \
    --tabnum=3 \
    --form \
    --field="Default rule action":CB "$configActionMenu" \
    --field="<b>alert</b> - generate an alert":LBL "" \
    --field="<b>pass</b> - stop further inspection of the packet":LBL "" \
    --field="<b>drop</b> - drop packet and generate alert":LBL "" \
    --field="<b>reject</b> - send RST/ICMP unreach error to the sender of the matching packet.":LBL "" \
    --field="<b>rejectsrc</b> - same as just reject":LBL "" \
    --field="<b>rejectdst</b> - send RST/ICMP error packet to receiver of the matching packet.":LBL "" \
    --field="<b>rejectboth</b> - send RST/ICMP error packets to both sides of the conversation.":LBL "" \
    --field="":LBL "" \
    --field="<b>Update</b>":LBL "" \
    --field="Update rules (days):NUM" "$configUpdate\!1..365\!1\!0" \
    --field="":LBL "" \
    --field="Update rules now":fbtn "bash -c updateSuricataRules" \
    > "$_PROJECT_DIR_TMP/rules.tab" &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  local ignoredSIDS=( $(cat $_NOTIF_IGNORE_LIST) )
  descIgnore="List of SIDs not shown with suriNotif\\n"
  descIgnore+="Double click on SID to remove it."

  exec 4<> "$_SID_IGNORE_PIPE"

  yad \
    --plug="$KEY" \
    --tabnum=4 \
    --list \
    --listen \
    --cycle-read \
    --text="$descIgnore" \
    --dclick-action="bash -c 'deleteIgnoredSID %s'" \
    --column="SID" "${ignoredSIDS[@]}" \
    <&4 &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  local customRules=( $(cat $_SURICATA_CUSTOM_RULES) )
  descCustom="List of custom Rules"

  exec 5<> "$_SID_CUSTOM_PIPE"

  yad \
    --plug="$KEY" \
    --tabnum=5 \
    --list \
    --listen \
    --cycle-read \
    --text="$descCustom" \
    --dclick-action="bash -c 'deleteIgnoredSID %s'" \
    --column="SID" --column="Rule" "${customRules[@]}" \
    <&5 &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  yad \
    --plug="$KEY" \
    --tabnum=6 \
    --form \
    --field="":LBL "" \
    --field="Backup":fbtn "bash -c backupSuriGUI" \
    &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  TXT="  <b>$_PROJECT_NAME</b>   Version: <b>$_PROJECT_VER</b>    Build: <b>$_PROJECT_BUILD</b>\\n\\n"
  TXT+="  OS: $(lsb_release -ds) on $(hostname)\\n"
  TXT+="  Kernel: $(uname -sr)\\n\\n"
  TXT+="  <i>$(uptime)</i>"

  yad \
    --notebook \
    --width=600 \
    --center  \
    --title="suriGUI Settings" \
    --text="$TXT" \
    --auto-kill \
    --auto-close \
    --window-icon="$_PROJECT_ICON" \
    --image="$_PROJECT_ICON" \
    --image-on-top \
    --key="$KEY" \
    --tab="suriGUI" --tab="Suricata" --tab="Rules" --tab="Ignored SIDs" --tab="Custom Rules" --tab="Backup/Restore" \
    --button="Close!exit":1 --button="Save!gtk-save":0
  ret=$?

  case "$ret" in
    0 ) saveSettings  ;;
    1 ) : ;;
    * ) exit 0  ;;
  esac

  for tab in $_PROJECT_DIR_TMP/*.tab
  do
    rm "$tab"
  done
}

function stopNotifDaemon()
{
  d3bug

  if [[ -f "$_NOTIF_PID" ]]
  then
    pkill -P "$(cat $_NOTIF_PID)" &>/dev/null # kill process and all children
    rm "$_NOTIF_PID"
    d3bug info "suriNotif stopped"
  else
    d3bug info "suriNotif PID not found! Nothing to kill."
  fi
}

function startNotifDaemon()
{
  d3bug

  tail -f "$_PROJECT_DIR_LOG/eve.json" > >( \
    jq --unbuffered -r -c 'select(.event_type=="alert")' \
    | jq --unbuffered -r '@sh  "sid=\(.alert.signature_id) category=\(.alert.category) signature=\(.alert.signature) SRC=\(.src_ip) DEST=\(.dest_ip)  action=\(.alert.action)"' \
      | while read -r line; do \
        eval "$line" ; \
        send_notif alert "$category" "$signature" "$sid" "$SRC" "$DEST" "$action" ; \
      done ) &

  echo "$!" > "$_NOTIF_PID"
  d3bug info "Notifications started with PID: $(cat $_NOTIF_PID)"
}

function controlSuricataService()
{
  d3bug

  # stop | start
  local action="$1"

  sudo systemctl "$action" suricata &>/dev/null
  d3bug info "$action Suricata service"
}

function updateTrayMenu()
{
  d3bug

  # active | inactive
  local status="$1"

  case "$status" in
    "active")   menu="Stop!bash -c 'controlSuricataService stop'" ;;
    "inactive") menu="Start!bash -c 'controlSuricataService start'" ;;
    # "starting") menu="" ;;
    *)          exit 1 ;;
  esac

  export icoon="$_PROJECT_DIR_RES/icons/settings.png"
  #xdg-icon-resource install --context mimetypes --size 48 "$_PROJECT_DIR_RES/icons/settings.png" "$_PROJECT_NAME-settings"

  menu+="||Settings!bash -c 'suriGUISettings'!settings"
  menu+="||Update!bash -c updateSuriGUI"
  menu+="||Exit!quit!gtk-save"

  [[ -p $_PROJECT_PIPE ]] && exec 3<>$_PROJECT_PIPE echo "menu:$menu" >&3 &

  d3bug info "Menu updated: $status"

  [[ -p $_PROJECT_PIPE ]] && exec 3<>$_PROJECT_PIPE echo "icon:$_PROJECT_NAME-$status" >&3 &

  d3bug info "Icon updated: $status"

}

function checkInternetConnection()
{
  d3bug

  if ping -q -c 1 -W 1 github.com >/dev/null
  then
    d3bug info "Internet connection is active"
  else
    d3bug error "No internet connection. Trying with Qubes proxy"

    export https_proxy="127.0.0.1:8082"
    if ping -q -c 1 -W 1 github.com >/dev/null
    then
      d3bug error "Internet connection not active. Exit 1"
      exit 1
    else
      d3bug info "Internet found behind Qubes Proxy"
    fi
  fi
}

function updateSuricataRules()
{
  d3bug

  checkInternetConnection

  readConfigFile action
  oldAction="$configAction"

  if command -v suricata-update &>/dev/null
  then
    d3bug info "Downloading suricata rules ..."
    if suricata-update  --output "$_PROJECT_DIR_CONF" \
                        --data-dir "$_PROJECT_DIR_TMP" \
                        --no-test &>/dev/null
    then
      d3bug info "Download done"

      echo "$dateShort" > "$_SURICATA_UPDATE_TIMESTAMP"
      d3bug info "Update finished @ $dateLong"


      # d3bug info "Starting reload Suricata rules..."
      # sudo suricatasc -c reload-rules
      # d3bug info "Suricata rules reloaded"

    else
      d3bug error "Error updating Suricata rules. Exit 1"
      exit 1
    fi
  else
    d3bug error "suricata-update not installed. Exit 1"
    exit 1
  fi

  checkSuricataRules
}

function startSuriGUI()
{
  d3bug

  d3bug info "Starting $_PROJECT_NAME $_PROJECT_VER"

  yad \
    --notification\
    --no-middle \
    --listen \
    --text="$_PROJECT_NAME v$_PROJECT_VER" \
    --image="$suricataStatus" \
    --separator="|" \
    --menu="Exit!quit!gtk-exit" \
    --command="bash -c suriGUISettings" \
  <&3 &>/dev/null

  [[ -f "$_PROJECT_PID" ]] && rm "$_PROJECT_PID"
}

function checkSuricataStatus()
{
  d3bug

  if systemctl is-active --quiet suricata
  then
    export suricataStatus=active
  else
    export suricataStatus=inactive
  fi

  d3bug info "Suricata is $suricataStatus"
  updateTrayMenu "$suricataStatus"
}

function createProjectPipes()
{
  d3bug

  local pipes=( "$_PROJECT_PIPE"
                "$_SID_IGNORE_PIPE" )

  for pipe in "${pipes[@]}"
  do
    # remove old pipe if exists
    if [[ -e $pipe ]]
    then
      if rm "$pipe"
      then
        d3bug info "Old Pipe deleted"
      else
        d3bug error "Can't remove old pipe"
        exit 1
      fi
    fi

    # create a new one
    if mkfifo "$pipe"
    then
      d3bug info "Pipe created: $pipe"
    else
      d3bug error "Can't create pipe: $pipe"
      exit 1
    fi
  done

  exec 3<> "$_PROJECT_PIPE"  && d3bug info "Project pipe started"
}

function checkSuricataCustomRules()
{
  d3bug

  # check for file
  if [[ -f $_SURICATA_CUSTOM_RULES ]]
  then
    for line in $_SURICATA_CUSTOM_RULES
    do
      echo "$line"
      #line="2027868,pass"
      #sid="2027868"
      #rule="pass"

      #open suricata_rules
      # find line with keyword: "2027868"
      # check if first word is "#"
        # if not then change first word into: "pass"
        # if first word is comment then wtf?

    done

  fi
}


function checkSuricataRules()
{
  d3bug

  readConfigFile "update"

  if [[ ! -f "$_SURICATA_RULES" ]]
  then
    updateSuricataRules
  else
    d3bug info "Suricata rules found"

    if [[ ! -f "$_SURICATA_UPDATE_TIMESTAMP" ]]
    then
      d3bug error "Timestamp not found. Updating..."
      updateSuricataRules
    else
      if [[ $(cat "$_SURICATA_UPDATE_TIMESTAMP") =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]
      then
        export lastUpdate="$((($(date +%s)-$(date +%s --date $(cat $_SURICATA_UPDATE_TIMESTAMP)))/(3600*24)))"
        if [[ "$lastUpdate" -gt "$configUpdate" ]]
        then
          d3bug error "Rules to old"
          updateSuricataRules
        else
          d3bug info "Rules old $lastUpdate days. No need to update. ($configUpdate days)"
        fi
      else
        d3bug error "Rules never updated. Updating..."
        updateSuricataRules
      fi
    fi
  fi

  local old=$(awk '{print $1; exit}' "$_SURICATA_RULES")
  d3bug info "Suricata rule action: $old"
  readConfigFile action
  local new="$configAction"
  d3bug info "suriGUI rule action: $new"

  if [[ "$old" == "$new" ]]
  then
    d3bug info "Rule action match"
  else
    d3bug error "Rule action mismatch"
    updateConfigFile rules "$new" "$old"
  fi

  # check for custom rules

}

function checkProjectConfigFiles ()
{
  d3bug

  local files=( "$_PROJECT_CONFIG_FILE"
                "$_SURICATA_CUSTOM_RULES"
                "$_NOTIF_IGNORE_LIST" )

  for file in "${files[@]}"
  do
    if [[ ! -f "$file" ]]
    then
      d3bug error "Config not found: $file"
      fileName=$(basename $file)
      if ( cp "$_PROJECT_DIR_CONF/default/$fileName.default" "$_PROJECT_DIR_CONF/$fileName" )
      then
        d3bug info "Config created"
      else
        d3bug error "Can't copy default config file: $fileName"
        exit 1
      fi
    else
      d3bug info "Local config found: $file"
    fi
  done
}

function checkProjectRequirements ()
{
  d3bug

  local apps=( "libnetfilter-queue-dev"
                "suricata"
                "jq"
                "yad" )

  for app in "${apps[@]}"
  do
    if dpkg -s "$app" &>/dev/null
    then
      d3bug info "$app installed"
    else
      d3bug error "$app not found"

      yad --image="$_PROJECT_ICON" --image-on-top \
          --title="$_PROJECT_NAME" \
          --button="Yes" --button="No" \
          --text="$app is not installed.\nDo you want to install it now?" &>/dev/null
      ret=$?
      if [[ $ret = 0 ]]
      then
        d3bug info "Installing $app ..."
        if sudo apt-get install "$app" -y &>/dev/null
        then
          d3bug info "Done"
        else
          d3bug error "Can't install: $app"
          exit 1
        fi
      else
        exit 1
      fi
    fi
  done
}

function registerProjectIcons()
{
  d3bug

  local icons=( "$_PROJECT_ICON"
                "$_PROJECT_ICON_INACTIVE"
                "$_PROJECT_ICON_ACTIVE"
                "$_PROJECT_ICON_MENU_EXIT"
                "$_PROJECT_ICON_MENU_SETTINGS"
                "$_PROJECT_ICON_MENU_START"
                "$_PROJECT_ICON_MENU_STOP"
                "$_PROJECT_ICON_MENU_UPDATE" )

  for icon in "${icons[@]}"
  do
    local iconName=$(basename "$icon" | sed "s/\..*//")
    xdg-icon-resource install --context mimetypes --size 48 "$icon" "$iconName"
    d3bug info "Registered icon: $iconName"
  done
}


# Export functions for yad
export -f d3bug
export -f exitSuriGUI
export -f readConfigFile
export -f saveSettings
export -f suriGUISettings
export -f deleteIgnoredSID
export -f controlSuricataService
export -f updateSuricataRules
export -f updateSuriGUI


# S T A R T   S U R I G U I
_GLOBAL_VARS
checkProjectRequirements
checkProjectDirectories
checkProjectConfigFiles

echo "$$" > "$_PROJECT_PID"
mkdi rcreateProjectPipes

checkSuricataRules
checkSuricataStatus

registerProjectIcons
startSuriGUI &


while ( ! systemctl is-active --quiet suricata )
do
  ( systemctl is-active --quiet suricata ) && break
  d3bug info "Waiting for Suricata"
  sleep 5
done #&>/dev/null
d3bug info "Suricata is active"


while [[ ! -f "$_PROJECT_DIR_LOG/eve.json" ]]
do
  [[ -f "$_PROJECT_DIR_LOG/eve.json" ]] && break
  d3bug info "Waiting for log file"
  sleep 5
done #&>/dev/null
d3bug info "Log output found"


readConfigFile notifications
[[ $configNotifications == "TRUE" ]] && startNotifDaemon

while :
do
  [[ ! -f "$_PROJECT_PID" ]] && break
  checkSuricataStatus
  sleep 5
done &>/dev/null

#!/usr/bin/env bash
#
# coder: ro0t
# stamp: 0.211114-so

# God Mode: On
set -o nounset      # Exit on undefined variable
set -o errexit      # Exit on non-zero status
set -o pipefail     # Pipe return exit status

trap 'echo "$BASH_COMMAND" failed with error code $?' ERR


export _PROJECT_NAME="suriGUI"
export _PROJECT_VER="0.2"
export _PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
export _PROJECT_DIR_RES="$_PROJECT_DIR/res"
export _PROJECT_DIR_TMP="$_PROJECT_DIR/tmp"

export _PROJECT_ICON_INACTIVE="$_PROJECT_DIR_RES/icon-red.png"
export _PROJECT_ICON_ACTIVE="$_PROJECT_DIR_RES/icon-green.png"
export _PROJECT_PIPE="$_PROJECT_DIR_TMP/suri.pipe"

export _SURICATA_DIR="/etc/suricata"
export _SURICATA_DIR_RULES="$_SURICATA_DIR/rules"
export _SURICATA_DIR_LOG="/var/log/suricata"

export _SURICATA_CFG_DEF="$_SURICATA_DIR/suricata.yaml"
export _SURICATA_CFG_IPS="$_SURICATA_DIR/ips.yaml"
export _SURICATA_RULES="$_SURICATA_DIR_RULES/suricata.rules"
export _SURICATA_EVE="$_SURICATA_DIR_LOG/eve.json"
export _SURICATA_UPDATE_TIMESTAMP="$_SURICATA_DIR/update.timestamp"
export _SURICATA_OUTDATE="14"


function exitSuriGUI() {
  echo "exiting..."
  [[ -e $_PROJECT_PIPE ]] && rm "$_PROJECT_PIPE"

  pkill -f "$_PROJECT_NAME-$_PROJECT_VER"
  exit 0
}
export -f exitSuriGUI
trap exitSuriGUI SIGINT SIGTERM EXIT


[[ -e $_PROJECT_PIPE ]] && rm "$_PROJECT_PIPE"
mkfifo      "$_PROJECT_PIPE"
exec 3<>    "$_PROJECT_PIPE"



function suriOnClick() {

  echo "clicked"
  #echo "quit" >&3
  exec 3<>$_PROJECT_PIPE echo "icon:gtk-help" >&3 &

}
export -f suriOnClick

function updateIcon() {
  exec 3<>$_PROJECT_PIPE echo "icon:$_PROJECT_NAME-$1" >&3 &
}
export -f updateIcon


function stopSuricataService() {
  systemctl stop suricata
  updateIcon inactive
  updateMenu inactive
}
export -f stopSuricataService


function suriSettings() {
  echo suriSettings

}
export -f suriSettings


function updateMenu() {
  case "$*" in
    "active") menu="Stop!bash -c stopSuricataService|Status!bash -c checkSuricataStatus||Settings!bash -c suriSettings" ;;
    "inactive") menu="Start!bash -c checkSuricataStatus|Status!bash -c checkSuricataStatus||Settings!bash -c suriSettings" ;;
    *)    exit 1          ;;
  esac

  menu+="||Exit!bash -c exitSuriGUI"
  exec 3<>$_PROJECT_PIPE echo "menu:$menu" >&3 &
}
export -f updateMenu


function updateSuricataRules() {
  echo "start updating new rules"

  # qubes proxy for template qubes
  export https_proxy=127.0.0.1:8082
  suricata-update --output "$_SURICATA_RULES" \
                  --config "$_SURICATA_CFG_DEF" \
                  --data-dir "$_SURICATA_DIR" \
                  --no-test

  echo "$(date +"%Y-%m-%d")" > "$_SURICATA_UPDATE_TIMESTAMP"

  # create timestamp
}
export -f updateSuricataRules


function checkSuricataStatus() {
  export isSuricataActive=$(systemctl is-active suricata)

  case "$isSuricataActive" in
    "inactive" )
      echo "Suricata service not running"
      systemctl start suricata
      echo "Starting service"
      sleep 5 && export isSuricataActive=$(systemctl is-active suricata)

      if [[ "$isSuricataActive" == "active" ]]; then
        echo "Suricata is active"
        updateIcon active
        updateMenu active
      else
        echo "Error starting Suricata service"
        updateIcon inactive
        return 1
      fi
    ;;
    "active" )
      echo "Suricata is active"
      updateIcon active
      updateMenu active
    ;;
    * )  echo "unknown service status" && return 1  ;;
  esac

  pgrep -f "suriNOTIF" >/dev/null 2>&1  && export isNotifActive="True" \
                                        || export isNotifActive="False"
  echo "Notifications are active: $isNotifActive"

  [[ -f $_SURICATA_EVE ]] && export isLogActive=True || export isLogActive=False
  echo "EVE log found: $isLogActive"

  if [[ -f $_SURICATA_UPDATE_TIMESTAMP ]]; then
    if [[ $(cat $_SURICATA_UPDATE_TIMESTAMP) =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
      export lastUpdate="$((($(date +%s)-$(date +%s --date $(cat $_SURICATA_UPDATE_TIMESTAMP)))/(3600*24)))"
      echo "Rules old $lastUpdate days"
      [[ "$lastUpdate" -gt "$_SURICATA_OUTDATE" ]] && updateSuricataRules || echo "nothing to do"
    else
        echo "Please update rules. Update never initiated!"
        updateSuricataRules
    fi
  else
    updateSuricataRules
  fi
}
export -f checkSuricataStatus


function startSuriGUI() {
  # Needed to show bigger icon in sys-tray
  xdg-icon-resource install --context mimetypes --size 48 "$_PROJECT_ICON_INACTIVE" "$_PROJECT_NAME-inactive"
  xdg-icon-resource install --context mimetypes --size 48 "$_PROJECT_ICON_ACTIVE" "$_PROJECT_NAME-active"

  echo "Starting $_PROJECT_NAME $_PROJECT_VER"

  exec -a "$_PROJECT_NAME-$_PROJECT_VER" \
    yad --notification --no-middle --listen \
      --text="$_PROJECT_NAME v$_PROJECT_VER" \
      --image="$_PROJECT_NAME-inactive" \
      --separator="|" \
      --menu="${suriTrayMenuList:-Exit!bash -c exitSuriGUI}" \
      --command="bash -c suriOnClick" <&3 &
}
export -f startSuriGUI


startSuriGUI
checkSuricataStatus
updateMenu active


# no pupup notification, silent, icon blinking
# suri notif script as part of this app

while [[ true ]]; do
  sleep 10
done

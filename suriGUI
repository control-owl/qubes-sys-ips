#!/usr/bin/env bash
# coder: ro0t
#clear
set -o nounset      # Exit on undefined variable
set -o errexit      # Exit on non-zero status
set -o pipefail     # Pipe return exit status

trap 'd3bug error "$BASH_COMMAND" failed with error code $?' ERR
trap exitSuriGUI EXIT SIGUSR1 SIGUSR2

#23-23
# GLOBAL VARIABLES
# INFO
export _PROJECT_NAME="suriGUI"
export _PROJECT_DESCRIPTION="GUI for Suricata"
export _PROJECT_VER="0.2.220802"

#
# DIRs
export _PROJECT_DIR="/home/user/suriGUI"
export _PROJECT_DIR_BACKUP="$_PROJECT_DIR/backup"
export _PROJECT_DIR_CONF="$_PROJECT_DIR/conf"
export _PROJECT_DIR_LOG="$_PROJECT_DIR/log/$(date +'%Y-%m-%d')"
export _PROJECT_DIR_RES="$_PROJECT_DIR/res"
export _PROJECT_DIR_TMP="$_PROJECT_DIR/tmp"
export _PROJECT_DIR_SURICATA="$_PROJECT_DIR_CONF/suricata"

_PROJECT_DB_DIRS=( "$_PROJECT_DIR"
                   "$_PROJECT_DIR_CONF"
                   "$_PROJECT_DIR_RES"
                   "$_PROJECT_DIR_LOG"
                   "$_PROJECT_DIR_TMP"
                   "$_PROJECT_DIR_SURICATA" )

#
# FILEs
export _PROJECT_FILE_CONFIG_NEW="$_PROJECT_DIR_CONF/suriGUI.yaml"
export _PROJECT_FILE_CUSTOM_RULES="$_PROJECT_DIR_CONF/suriGUI.rules"
export _PROJECT_FILE_LOG="$_PROJECT_DIR_LOG/suriGUI.log"
export _PROJECT_FILE_SURICATA_RULES="$_PROJECT_DIR_SURICATA/suricata.rules"
export _PROJECT_FILE_SURICATA_RULES_TIMESTAMP="$_PROJECT_DIR_SURICATA/suricata.rules.timestamp"
export _PROJECT_FILE_SURICATA_CONFIG="$_PROJECT_DIR_SURICATA/suricata.yaml"
export _PROJECT_FILE_IGNORED_SIDS="$_PROJECT_DIR_CONF/ignore.list"
export _PROJECT_FILE_SPAM="$_PROJECT_DIR_TMP/spam.tmp"

_PROJECT_DB_FILES=( "$_PROJECT_FILE_CONFIG_NEW"
                    "$_PROJECT_FILE_CUSTOM_RULES"
                    "$_PROJECT_FILE_LOG"
                    "$_PROJECT_FILE_SURICATA_RULES"
                    "$_PROJECT_FILE_IGNORED_SIDS"
                    "$_PROJECT_FILE_SPAM"
                    "$_PROJECT_FILE_SURICATA_CONFIG" )


#
# PIPEs
export _PROJECT_PIPE_MAIN="$_PROJECT_DIR_TMP/suriGUI.pipe"
export _PROJECT_PIPE_SID_IGNORE="$_PROJECT_DIR_TMP/SIDignore.pipe"
export _PROJECT_PIPE_SID_CUSTOM="$_PROJECT_DIR_TMP/SIDcustom.pipe"

_PROJECT_DB_PIPES=( "$_PROJECT_PIPE_MAIN"
                    "$_PROJECT_PIPE_SID_IGNORE"
                    "$_PROJECT_PIPE_SID_CUSTOM" )
#
# ICONs
export _PROJECT_ICON_MAIN="$_PROJECT_DIR_RES/suriGUI.png"
export _PROJECT_ICON_INACTIVE="$_PROJECT_DIR_RES/icons/inactive.png"
export _PROJECT_ICON_ACTIVE="$_PROJECT_DIR_RES/icons/active.png"

_PROJECT_DB_ICONS=( "$_PROJECT_ICON_MAIN"
                    "$_PROJECT_ICON_INACTIVE"
                    "$_PROJECT_ICON_ACTIVE" )


#
# PIDs
export _PROJECT_PID_MAIN="$_PROJECT_DIR_TMP/suriGUI.pid"
export _PROJECT_PID_NOTIF="$_PROJECT_DIR_TMP/suriNotif.pid"

_PROJECT_DB_REQS=( "libnetfilter-queue-dev"
                   "suricata"
                   "jq"
                   "yad" )




function exitSuriGUI()
# Trap any exit signal and execute this function
# Remove all tmp files (and log if enabled)
{

  echo "EXITing"
  stopNotifDaemon

  # log delete ?
  # source "$_PROJECT_CONFIG_FILE"
  # if [[ "$keep" != "TRUE" ]]
  # then
  #   d3bug info "Deleting log files"
  #   rm "$_PROJECT_DIR_LOG" -R
  # fi

  # Cleaning temp files
  find "$_PROJECT_DIR_TMP" -type f -name "*.pipe" -delete &>/dev/null
  find "$_PROJECT_DIR_TMP" -type f -name "*.tmp" -delete &>/dev/null
  find "$_PROJECT_DIR_TMP" -type f -name "*.tab" -delete &>/dev/null


  d3bug info "good luck"

  # if [[ -f "$_PROJECT_PID_MAIN" ]]
  # then
  #   if pkill -P "$(cat $_PROJECT_PID_MAIN)"
  #   then
  #     rm "$_PROJECT_PID_MAIN"
  #   else
  #     d3bug error "Can not kill myself ?"
  #   fi
  # else
  #   d3bug info "PID not found! Nothing to kill."
  # fi


  exit 0

  # Kill project and Suricata
  #sudo pkill -f suriGUI
}


function d3bug()
# Print output messages, function names, errors
# Usage: d3bug info|error "Lorem ipsum dolor sit amet"
{
  local type="${1:-*}"
  local msg="${2:-}"

  local logToFile="FALSE"
  local silentOutput="FALSE"
  local onlyErrorMsg="FALSE"

  if [[ ! -e "$_PROJECT_FILE_LOG" ]]
  then
    if ! mkdir -p "${_PROJECT_FILE_LOG%/*}" && touch "$_PROJECT_FILE_LOG"
    then
      echo "error"
    fi
  fi

  case "$type" in
    "notee" ) echo    "$(date +"%H:%M:%S")  |   |__ $msg" ;;
    "welcome" ) echo    "$(date +"%H:%M:%S")  |   |__ $msg" | tee -a "$_PROJECT_FILE_LOG" ;;
    "info" )    echo    "$(date +"%H:%M:%S")  |   |__ $msg" | tee -a "$_PROJECT_FILE_LOG" ;;
    "ok" )      echo    "$(date +"%H:%M:%S")  |   |__ ðŸ—¹ $msg" | tee -a "$_PROJECT_FILE_LOG" ;;
    "error" )   echo -e "$(date +"%H:%M:%S")  ERROR $msg" | tee -a "$_PROJECT_FILE_LOG" ;;
    *)          echo    "$(date +"%H:%M:%S")  |__ ${FUNCNAME[1]}" | tee -a "$_PROJECT_FILE_LOG" ;;
  esac
}


echo -e \
"

####################
# $_PROJECT_NAME          #
# $_PROJECT_DESCRIPTION #
# $_PROJECT_VER       #
####################"

#\
   #| tee -a "$_PROJECT_FILE_LOG"



function readConfigFile()
# Read suriGUI.conf and export all variables for yad
# Yad is not working if export is not done
# will be removed and replaced with settings.yaml
{
  d3bug
  local config="${1:-*}"

  source "$_PROJECT_CONFIG_FILE"

  case "$config" in
    "actionMenu")
      defaultActions="alert\!pass\!drop\!reject\!rejectsrc\!rejectdst\!rejectboth"
      makeDefault="^"
      export configActionMenu=$(echo "$defaultActions" | sed "s/$action/$makeDefault$action/g")
    ;;
    "update")
      export configUpdate="$update"
    ;;
    "timeout")
      export configTimeout="$timeout"
    ;;
    "duration")
      export configDuration="$duration"
    ;;
    "notifications")
      export configNotifications="$notifications"
    ;;
    "keep")
      export configKeep="$keep"
      ;;
    "action")
      export configAction="$action"
      ;;
    "notificationPositionMenu")
      defaultPositions="Top_left\!Top_right\!Bottom_left\!Bottom_right"
      makeDefault="^"
      export configNotificationPositionMenu=$(echo "$defaultPositions" | sed "s/$position/$makeDefault$position/g")
    ;;
    "notificationPosition")
      export configNotificationPosition="$position"
      ;;
    *)
      d3bug error "wrong config lookup"
    ;;
  esac

  d3bug info "Get config: $config"
}


function updateConfigFile()
# Write to suriGUI.conf and reload suricata if rule settings were changed
# NEED TO REWRITE
# will be removed and replaced with new function
{
  d3bug

  #updateConfigFile rules "$new" "$old"
  local component="$1"
  local newStatus="$2"
  local oldStatus="${3:-}"

  case "$component" in
    "rules")
      d3bug info "Updating $component: $oldStatus -> $newStatus"

      sed -i "s/\<$oldStatus\>/$newStatus/" "$_PROJECT_FILE_SURICATA_RULES"
      # checkSuricataStatus &>/dev/null
      #
      # if [[ "$suricataStatus" == "active" ]]
      # then
      #   d3bug info "Starting Suricata reload..."
      #   if sudo suricatasc -c reload-rules
      #   then
      #     #sudo systemctl reload suricata #&>/dev/null
      #     d3bug info "Rules updated & reloaded"
      #   else
      #     d3bug error "Can't reload rules??"
      #   fi
      # else
      #   d3bug info "Rules updated"
      # fi
    ;;
    "action")
      sed -i "s/^\(action\s*=\s*\).*\$/\1$newStatus/" "$_PROJECT_CONFIG_FILE"
      d3bug info "Rule action: $newStatus"
    ;;
  esac
}


function restartSuriGUI()
# Kill suriGUI and suricata, then reload
# Suricata should not be killed
# Too long loading time
{
  d3bug

  d3bug info "Starting restart"
  pkill -f "suriGUI" && exec "suriGUI"

}


function changeSID()
# changeSID 1234567 add|remove source|destination 1.2.3.4
# changeSID 1234567 enable|disable
{
  local SID="$1"
  local action="$2"
  local location="$3"
  local IP="$4"


  oldRule=$(grep -F "sid:$SID" $_PROJECT_FILE_SURICATA_RULES)
  if [[ -z "$oldRule" ]]
  then
    echo "Rule with SID: $SID is NOT found in file: $_PROJECT_FILE_SURICATA_RULES"
    echo "Exit 1"
    exit 1
  fi

  ruleLineNum="$(grep -n "$SID" $_PROJECT_FILE_SURICATA_RULES | head -n 1 | cut -d: -f1)"

  # get rule status
  if [[ "$oldRule" =~ ^[[:space:]]*#.* ]]
  then
    ruleStatus="inactive"
  else
    ruleStatus="active"
  fi

  # get old source/destionation position in rule
  if [[ $(cut -d " " -f 5 <<< $oldRule) == "->" ]]
  then
    sourcePos=3
    destinationPos=6
  else
    if [[ $(cut -d " " -f 6 <<< $oldRule) == "->" ]]
    then
      sourcePos=4
      destinationPos=7
    else
      echo "Rule does NOT have standard formating."
      echo "There is eather double spaces in rule or broken comment."
      echo "Exit 1"
      exit 1
    fi
  fi

  oldSource=$(cut -d " " -f "$sourcePos" <<< $oldRule)
  oldDestination=$(cut -d " " -f "$destinationPos" <<< $oldRule)


  if [[ $location == "source" ]]
  then
    local oldLocation="$oldSource"
    local newLocation="$sourcePos"
  else
    local oldLocation="$oldDestination"
    local newLocation="$destinationPos"
  fi

  echo "----------------------"
  echo "- Line: $ruleLineNum"
  echo "- SID: $SID"
  echo "- Action: $action"
  echo "- Location: $location"
  echo "- IP: $IP"
  echo "- Rule: $oldRule" #| head -c 100
  echo "- Status: $ruleStatus"
  echo "- Source: $oldSource"
  echo "- Destination: $oldDestination"
  echo "----------------------"

  case "$action" in
    "add")
      # detect if location already has IP addresses
      if grep -F "$IP" &>/dev/null <<< $oldLocation
      then
        echo "SID $SID already contains IP: $IP in $location"
        shift
      else
        echo "SID $SID does not contain IP: $IP in $location"

        # detect if current location is prepared for multiple addresses []
        if [[ "$oldLocation" =~ \[.*\] ]]
        then
          echo "multiple addresses found"
          oldLocation=$(awk -F'[][]' '{print $2}' <<< $oldLocation)
        else
          echo "only one address in $location"
        fi

        newAddress="[$oldLocation,!$IP]"
        echo "newAddress: $newAddress"
        echo "new location: $newLocation"

        newRule=$(awk -v r=${newAddress} -v pos=${newLocation} '{$pos=r}1' <<< $oldRule)

        echo "new location: $newRule"

        # execute change
        sed -i -e "${ruleLineNum} c\\" -e "${newRule}" ${_PROJECT_FILE_SURICATA_RULES}

      fi
    ;;
    "remove")
      :
      # Remove ip from source or destination address
    ;;
    "enable")
      :
      # comment rule
    ;;
    "disable")
      :
      # uncomment rule
    ;;
    *) exit 1 ;;

  esac
}


function editSID()
{
  d3bug
  local sid="${1:-}"
  local cat="${2:-}"
  local src="${3:-}"
  local dest="${4:-}"
  local action="${5:-}"

  TXT="SID: $sid   Category: $cat  Action: $action \\n"
  TXT+="Suricata has prevented $src to communicate with $dest \\n"
  TXT+="\\n"


  yad \
    --form \
    --columns=2 \
    --image="utilities-terminal" \
    --image-on-top \
    --width="600" \
    --title="Edit SID: $sid" \
    --text="$TXT" \
    \
    --field="SRC":RO "$src" \
    --field="Allow SRC to DEST":FBTN "bash -c allowSource" \
    \
    --field="DEST":RO "$dest" \
    --field="Allow DEST to SRC":FBTN "bash -c allowDestination"

}


function preventSuricataSpam()
# Prevent showing same alert more than 1 time per day
# Write log to suriGUI.log
{
  d3bug

  local SID="$1"
  local SRC="$2"
  local DST="$3"

  # make timeStamp in GUI settings
  local timeStamp="$(date +'%Y-%m-%d-%H:%M')"
  # local currentLog="$dateStamp|$SID|$SRC|$DST"
  local currentLog="$timeStamp|$SID|$SRC|$DST"

  # d3bug info "Current log: $currentLog"

  # if grep -q "$currentLog" "$_PROJECT_FILE_LOG"
  if grep -q "$currentLog" "$_PROJECT_FILE_SPAM"
  then
    d3bug info "Spam message"
    stopSpam="TRUE"
  else
    d3bug info "Not found in suriGUIlog"
    echo "$currentLog" >> "$_PROJECT_FILE_SPAM"
    d3bug info "Output written"
    stopSpam="FALSE"
  fi
}


function checkIgnoreSidList()
# Check if SID is on Ignore list
# If yes then do not show notification
{
  d3bug

  local sid="$1"

  if grep -q "$sid" "$_PROJECT_FILE_IGNORED_SIDS"
  then
    d3bug error "SID: $sid is on ignore list"
    ignoreSID="TRUE"
  else
    d3bug info "SID: $sid is not on ignore list"
    ignoreSID="FALSE"
  fi
}


function send_notif()
# Show suriGUI notification when Suricata produces Alert message
# Check if SID is on Ignore list
# Check if Alert was alredy showed
{
  d3bug

  local type=${1:-Info}
  local cat=${2:-Category}
  local sig=${3:-Signature}
  local sid=${4:-SID}
  local src=${5:-SRC}
  local dest=${6:-DEST}
  local action=${7:-Action}


  case "$type" in
    "info")
      yad \
      --title="$_PROJECT_NAME v.$_PROJECT_VER" \
      --image="$_PROJECT_ICON_MAIN" \
      --form \
      --image-on-top \
      --button="OK" \
      --text="$cat" &
    ;;
    "alert")
      checkIgnoreSidList "$sid"
      if [[ "${ignoreSID:-}" == "FALSE" ]]
      then
        preventSuricataSpam "$sid" "$src" "$dest"
        if [[ "${stopSpam:-}" == "FALSE" ]]
        then
          case "$CONF_global_notifications_position" in
            "Top left" )      pos="--posx=1 --posy=1"  ;;
            "Top right" )     pos="--posx=-1 --posy=1"  ;;
            "Bottom left" )   pos="--posx=1 --posy=-1"  ;;
            "Bottom right" )  pos="--posx=-1 --posy=-1"  ;;
            "Center" )        pos="--center"  ;;
            "Under mouse" )   pos="--mouse"  ;;
            * )               pos=""  ;;
          esac

          TXT="<b>${cat:-Potentially Bad traffic}</b>\n"
          TXT+="$(date +'%Y-%m-%d') at  $(date +'%H:%M:%S') \n"
          TXT+="<i>$sig</i>"

          ACTIONcontrol="Continue blocking!Don't show again!Allow (not working yet)"

          set +o errexit # yad problem, error exit must be disabled
          yadOutput="$( yad \
            --title="suriNotif" ${pos:-} \
            --form \
            --on-top \
            --width=500 \
            --timeout="$CONF_global_notifications_duration" \
            --timeout-indicator="top" \
            --window-icon="res/suriGUI.png" \
            --image="res/alert_64.png" \
            --image-on-top \
            --text="$TXT" \
            --field="SID:RO" "$sid" \
            --field="Source IP:RO" "$src" \
            --field="Destination IP:RO" "$dest" \
            --field="Action:CB" "$ACTIONcontrol" \
            --button="OK":10)"
          ret=${?:-70}
          set -o errexit
          d3bug info "Return: $ret"

          case "$ret" in
            10 )
              # action="${actions[@]}"
              readarray -d '|' -t array <<< $(echo $yadOutput)
              d3bug info "Selected action: ${array[3]}"

              case "${array[3]}" in
                "Continue blocking")
                  : # Do nothing
                  #write to overview and ignore for today
                ;;

                "Don't show again")
                  if ! grep -q "$sid" "$_PROJECT_FILE_IGNORED_SIDS"
                  then
                    d3bug info "Writing SID: $sid to ignore list"
                    echo "$sid" >> $_PROJECT_FILE_IGNORED_SIDS
                  else
                    d3bug info "SID: $sid is already in ignore list"
                  fi
                ;;

                "Allow")
                  #editSID "$sid" "$cat" "$src" "$dest" #"$action"
                  :
                ;;
                *) d3bug error "Can't read action" ;;
              esac
            ;;
            # 20 )  editSID "$sid" "$cat" "$src" "$dest" "$action" ;;
            70 )  d3bug info "Timeout for notification: $sid"   ;;
            252 ) d3bug info "Escape key pressed"   ;;
            * )   echo "error"    ;;
          esac
        fi
      fi
    ;;
  esac
}


function updateSuriGUI()
# Not working yet
{
  d3bug

  d3bug info "Starting update"
  if [[ -d "$_PROJECT_DIR" ]]
  then
    cd "$_PROJECT_DIR"
    if git fetch
    then
      d3bug info "Update done"
      send_notif "info" "Update done. Restarting..."
      restartSuriGUI
    else
      d3bug info "No update found"
      send_notif "info" "No update found"
    fi
  fi
}


function deleteCustomRule()
# Remove custom suriGUI rule
# remove any modification from SID
# to be done
{
  d3bug

}



function deleteIgnoredSID()
# Remove ignored SID from Ignore list
{
  d3bug

  # 1000000 | xxxxxxx (7)
  local sid="$1"

  yad --image="$_PROJECT_ICON_MAIN" --image-on-top \
      --title="$_PROJECT_NAME" \
      --button="Yes" --button="No" \
      --text="Delete SID: $sid from Ignore list?" &>/dev/null
  ret=$?
  if [ $ret = 0 ]
  then
    sed -i "/$sid/d" "$_PROJECT_FILE_IGNORED_SIDS"
    d3bug info "SID: $sid removed"
    exec 4<>$_PROJECT_PIPE_SID_IGNORE echo -e "\f" >&4 &
    exec 4<>$_PROJECT_PIPE_SID_IGNORE echo -e "$(cat $_PROJECT_FILE_IGNORED_SIDS)" >&4 &
  else
    d3bug info "Nothing done"
  fi
}


function saveSettings()
# Save suriGUI settings to config file
# will be removed and replaced with new function
{
  d3bug

  readarray -d '|' -t tab1 <<< $(cat $_PROJECT_DIR_TMP/suriGUI.tab)
  sed -i "s/^\(notifications\s*=\s*\).*\$/\1${tab1[0]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(timeout\s*=\s*\).*\$/\1${tab1[3]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(position\s*=\s*\).*\$/\1${tab1[6]}/" "$_PROJECT_CONFIG_FILE"

  readarray -d '|' -t tab2 <<< $(cat $_PROJECT_DIR_TMP/suricata.tab)
  sed -i "s/^\(IPS\s*=\s*\).*\$/\1${tab2[2]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(rules\s*=\s*\).*\$/\1${tab2[3]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(keep\s*=\s*\).*\$/\1${tab2[6]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(log\s*=\s*\).*\$/\1${tab2[7]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(duration\s*=\s*\).*\$/\1${tab2[8]}/" "$_PROJECT_CONFIG_FILE"

  readarray -d '|' -t tab3 <<< $(cat $_PROJECT_DIR_TMP/rules.tab)
  sed -i "s/^\(action\s*=\s*\).*\$/\1${tab3[0]}/" "$_PROJECT_CONFIG_FILE"
  sed -i "s/^\(update\s*=\s*\).*\$/\1${tab3[10]}/" "$_PROJECT_CONFIG_FILE"
}


function suriGUISettings()
# suriGUI Setting Window
# PIPE 4
# PIPE 5
# suriGUI settings
# Suricata settings
# Rules settings
# Ignored SID List
# Custom Rules List - will be replaced
# Backup/Restore - Not done yet
{
  d3bug

  KEY="$RANDOM"

  readConfigFile keep
  readConfigFile duration
  readConfigFile actionMenu
  readConfigFile update
  readConfigFile action

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  local notificationPositionMenu="Top left\!Top right\!Bottom left\!Bottom right\!Center\!Under mouse"
  local makeDefault="^"
  local notificationPositionMenu=$(echo "$notificationPositionMenu" \
          | sed "s/$CONF_global_notifications_position/$makeDefault$CONF_global_notifications_position/g")

  yad \
    --plug="$KEY" \
    --tabnum=1 \
    --form \
    --field="<b>Notifications</b>":LBL "" \
    --field="Enable pop-up messages when something is blocked":chk "$CONF_global_notifications_enable" \
    --field="Notification duration in seconds":NUM "$CONF_global_notifications_duration\!1..60\!1\!0" \
    --field="Notification pop-up position":CB "$notificationPositionMenu" \
    --field="":LBL "" \
    --field="<b>Update</b>":LBL "" \
    --field="Auto update suricata rules":chk "$CONF_global_autoupdate_rules_enable" \
    --field="Interval in days":NUM "$CONF_global_autoupdate_rules_interval\!1..120\!1\!0" \
    --field="Auto update suriGUI":chk "$CONF_global_autoupdate_suriGUI_enable" \
    --field="Interval in days":NUM "$CONF_global_autoupdate_suriGUI_interval\!1..120\!1\!0" \
    --field="":LBL "" \
    --field="<b>Debugging</b>":LBL "" \
    --field="Enable debug":chk "$CONF_global_debugging_enable" \
    --field="Show only errors":chk "$CONF_global_debugging_erroronly" \
    --field="Output to file":chk "$CONF_global_debugging_file" \
    > "$_PROJECT_DIR_TMP/suriGUI.tab" &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  yad \
    --plug="$KEY" \
    --tabnum=2 \
    --form \
    --field="":LBL "" \
    --field="<b>Config files</b>":LBL "" \
    --field="Suricata config:":FL "$_PROJECT_FILE_SURICATA_CONFIG" \
    --field="Suricata rules:":FL "$_PROJECT_FILE_SURICATA_RULES" \
    --field="":LBL "" \
    --field="<b>Log</b>":LBL "" \
    --field="Keep log":chk "$configKeep" \
    --field="Log directory:":dir "$_PROJECT_DIR_LOG" \
    --field="Log history (days):NUM" "$configDuration\!1..60\!1\!0" \
    --file-filter="Yaml files (*.yaml)| *.yaml" \
    --file-filter="Config Files (*.cfg *.conf)| *.cfg *.conf" \
    --file-filter="All Files | *.*" \
    > "$_PROJECT_DIR_TMP/suricata.tab" &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  yad \
    --plug="$KEY" \
    --tabnum=3 \
    --form \
    --field="Default rule action":CB "$configActionMenu" \
    --field="<b>alert</b> - generate an alert":LBL "" \
    --field="<b>pass</b> - stop further inspection of the packet":LBL "" \
    --field="<b>drop</b> - drop packet and generate alert":LBL "" \
    --field="<b>reject</b> - send RST/ICMP unreach error to the sender of the matching packet.":LBL "" \
    --field="<b>rejectsrc</b> - same as just reject":LBL "" \
    --field="<b>rejectdst</b> - send RST/ICMP error packet to receiver of the matching packet.":LBL "" \
    --field="<b>rejectboth</b> - send RST/ICMP error packets to both sides of the conversation.":LBL "" \
    --field="":LBL "" \
    --field="<b>Update</b>":LBL "" \
    --field="Update rules (days)":NUM "$configUpdate\!1..365\!1\!0" \
    --field="":LBL "" \
    --field="Update rules now":fbtn "bash -c updateSuricataRules" \
    > "$_PROJECT_DIR_TMP/rules.tab" &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  local ignoredSIDS=( $(cat $_PROJECT_FILE_IGNORED_SIDS) )
  descIgnore="List of SIDs not shown with suriNotif\\n"
  descIgnore+="Double click on SID to remove it."

  exec 4<> "$_PROJECT_PIPE_SID_IGNORE"

  yad \
    --plug="$KEY" \
    --tabnum=4 \
    --list \
    --listen \
    --cycle-read \
    --text="$descIgnore" \
    --dclick-action="bash -c 'deleteIgnoredSID %s'" \
    --column="SID" "${ignoredSIDS[@]}" \
    <&4 &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  local customRules=( $(cat $_SURICATA_CUSTOM_RULES) )
  descCustom="List of custom Rules"
  readarray arrayaa <<< $(cat $_SURICATA_CUSTOM_RULES)

  exec 5<> "$_PROJECT_PIPE_SID_CUSTOM"

  yad \
    --plug="$KEY" \
    --tabnum=5 \
    --list \
    --listen \
    --cycle-read \
    --separator="|" \
    --text="$descCustom" \
    --dclick-action="bash -c 'deleteCustomRule %s'" \
    --column="SID" --column="Status" --column="IPs" "${arrayaa[@]}" \
    <&5 &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  yad \
    --plug="$KEY" \
    --tabnum=6 \
    --form \
    --field="":LBL "" \
    --field="Backup":fbtn "bash -c backupSuriGUI" \
    &

#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

  TXT="  <b>$_PROJECT_NAME</b>   Version: <b>$_PROJECT_VER</b>\\n\\n"
  TXT+="  OS: $(lsb_release -ds) on $(hostname)\\n"
  TXT+="  Kernel: $(uname -sr)\\n\\n"
  TXT+="  <i>$(uptime)</i>"

  yad \
    --notebook \
    --width=600 \
    --center  \
    --title="suriGUI Settings" \
    --text="$TXT" \
    --auto-kill \
    --auto-close \
    --window-icon="$_PROJECT_ICON_MAIN" \
    --image="$_PROJECT_ICON_MAIN" \
    --image-on-top \
    --key="$KEY" \
    --tab="suriGUI" --tab="Suricata" --tab="Rules" --tab="Ignored SIDs" --tab="Custom Rules" --tab="Backup/Restore" \
    --button="Close":1 --button="Save":0
  ret=$?

  case "$ret" in
    0 ) saveSettings  ;;
    1 ) : ;;
    * ) exit 0  ;;
  esac

  for tab in $_PROJECT_DIR_TMP/*.tab
  do
    rm "$tab"
  done
}


function stopNotifDaemon()
# Stop showing suriGUI notifications
# redesign:
# Check if cat file is really our app
# what if cat file is old file and we kill wrong process
{
  d3bug

  if [[ -f "$_PROJECT_PID_NOTIF" ]]
  then
    # if pkill -P "$(cat $_PROJECT_PID_NOTIF)"
    if sudo kill -9 "$(cat $_PROJECT_PID_NOTIF)" #&>/dev/null
    then
      rm "$_PROJECT_PID_NOTIF"
      d3bug info "suriNotif stopped"
    else
      d3bug error "Can not stop Notifications "
    fi
  else
    d3bug info "suriNotif PID not found! Nothing to kill."
  fi
}


function startNotifDaemon()
# Start suriGUI notifications
# Tail Suricata eve.json file
{
  d3bug

  tail -f "$_PROJECT_DIR_LOG/eve.json" > >( \
    jq --unbuffered -r -c 'select(.event_type=="alert")' \
    | jq --unbuffered -r '@sh  "sid=\(.alert.signature_id) category=\(.alert.category) signature=\(.alert.signature) SRC=\(.src_ip) DEST=\(.dest_ip)  action=\(.alert.action)"' \
      | while read -r line; do \
        eval "$line" ; \
        send_notif "alert" "$category" "$signature" "$sid" "$SRC" "$DEST" "$action" ; \
      done ) &

  echo "$!" > "$_PROJECT_PID_NOTIF"
  d3bug info "Notifications started with PID: $(cat $_PROJECT_PID_NOTIF)"
}


function controlSuricataService()
# Control Suricata service with systemctl
# Usage: controlSuricataService start|stop|restart
{
  d3bug

  # stop | start
  local action="$1"

  if sudo systemctl "$action" suricata &>/dev/null
  then
    d3bug ok "$action Suricata service"
  else
    d3bug error "Can not control Suricata service. $action is not working"
  fi
}


function updateTrayMenu()
# Create suriGUI tray menu and tray icon
{
  d3bug

  # active | inactive
  local status="$1"

  case "$status" in
    "active")   menu="Stop Suricata service!bash -c 'controlSuricataService stop'" ;;
    "inactive") menu="Start Suricata service!bash -c 'controlSuricataService start'" ;;
    *)          menu="" ;;
  esac

  #export icon="$_PROJECT_DIR_RES/icons/settings.png"
  #xdg-icon-resource install --context mimetypes --size 48 "$_PROJECT_DIR_RES/icons/settings.png" "$_PROJECT_NAME-settings"

  # menu+="||Reload suricata rules!bash -c 'sudo suricatasc -c reload-rules'"
  # menu+="|Update suricata rules!bash -c 'updateSuricataRules'"
  menu+="|Restart Suricata service!bash -c 'controlSuricataService restart'"
  menu+="||Settings!bash -c 'suriGUISettings'"
  menu+="||Exit!quit"

  [[ -p $_PROJECT_PIPE_MAIN ]] && exec 3<>$_PROJECT_PIPE_MAIN echo "menu:$menu" >&3 &

  d3bug info "Menu updated: $status"
  d3bug info "Menu: $menu"

  [[ -p $_PROJECT_PIPE_MAIN ]] && exec 3<>$_PROJECT_PIPE_MAIN echo "icon:$suricataStatus" >&3 &

  d3bug info "Icon updated: $status"

}


function startSuriGUI()
# Start suriGUI
# PIPE 3
# Create yad tray icon
{
  d3bug

  d3bug info "Starting $_PROJECT_NAME $_PROJECT_VER"

  yad \
    --notification\
    --no-middle \
    --listen \
    --text="$_PROJECT_NAME v$_PROJECT_VER" \
    --image="$suricataStatus" \
    --separator="|" \
    --menu="Exit!quit" \
    --command="bash -c suriGUISettings" \
  <&3 &>/dev/null

  [[ -f "$_PROJECT_PID_MAIN" ]] && rm "$_PROJECT_PID_MAIN"
}












function registerProjectIcons()
# Register suriGUI icon files
{
  d3bug

  for icon in "${_PROJECT_DB_ICONS[@]}"
  do
    local iconName=$(basename "$icon" | sed "s/\..*//")
    if xdg-icon-resource install --context mimetypes --size 48 "$icon" "$iconName"
    then
      d3bug ok "$iconName"
    else
      d3bug error "Can not register icon: $iconName"
    fi
  done
}


function checkSuricataStatus()
# Check Suricata's service status
{
  d3bug

  if systemctl is-active --quiet suricata
  then
    export suricataStatus="active"
  else
    export suricataStatus="inactive"

    d3bug error "Suricata is inactive."
    # if sudo systemctl restart suricata
    # then
    #   sleep 10
    #   d3bug info "Suricata restarted"
    # else
    #   d3bug error "Problem with restarting service"
    # fi
  fi

  d3bug info "Suricata is $suricataStatus"
  updateTrayMenu "$suricataStatus"
}


function readCustomRules()
# Read suriGUI.rules and convert it to associative array
# Print: readCustomRules
# Set array: eval declare -A $(readCustomRules)
# Get value: echo ${RULE_1234567[status]}
{
  local file="$_PROJECT_FILE_CONFIG_NEW"
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
  sed -ne "s|^\($s\):|\1|" \
      -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
      -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $file |
  awk -F$fs '{
    indent = length($1)/2;
    vname[indent] = $2;
    for (i in vname) {if (i > indent) {delete vname[i]}}
    if (length($3) > 0) {
       vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])}
       printf("%s%s%s%s%s=\"%s\"\n", "RULE_", vn, "[", $2, "]", $3);
    }
  }'
}


function checkCustomRules()
# After every update, Suricata will overwrite our editing of suricata rules
# It will create a fresh rule file
# To prevent overwrite, suriGUI.rules is created to persist our editing
{
  d3bug

  # Show all custom rule settings
  # readCustomRules
  #
  # # Create associative arrays
  # eval declare -A $(readCustomRules)
  #
  # # Show value
  # SID="7654321"
  # ask="status"
  # comp="RULE_$SID[$ask]"
  # echo "output: ${!comp}"
  #
  # checkSuricataRules


  # local old=$(awk '{print $1; exit}' "$_PROJECT_FILE_SURICATA_RULES")
  # d3bug info "Suricata rule action: $old"
  # readConfigFile action
  # local new="$configAction"
  # d3bug info "suriGUI rule action: $new"
  #
  # if [[ "$old" == "$new" ]]
  # then
  #   d3bug info "Rule action match"
  # else
  #   d3bug error "Rule action mismatch"
  #   updateConfigFile rules "$new" "$old"
  # fi
}


function reloadSuricataRules()
{
  d3bug

  d3bug info "Realoading rules ..."

  if sudo suricatasc -c reload-rules &>/dev/null
  then
    d3bug ok "Rules reloaded @ $(date +'%Y-%m-%d') $(date +'%H:%M:%S')"
  else
    d3bug error "Can't reload rules! Maybe Suricata is not running ?"
  fi
}


function updateSuricataRules()
# Download latest Suricata rules
# Reload Suricata if needed
{
  d3bug

  if command -v suricata-update &>/dev/null
  then
    d3bug info "Starting update ..."

    if suricata-update  --output "$_PROJECT_DIR_SURICATA" \
                        --data-dir "$_PROJECT_DIR_TMP" \
                        --no-test &>/dev/null
    then
      echo "$(date +'%Y-%m-%d')" > "$_PROJECT_FILE_SURICATA_RULES_TIMESTAMP"
      d3bug ok "Update done @ $(date +'%Y-%m-%d') $(date +'%H:%M:%S')"

      reloadSuricataRules
    else
      d3bug error "Error updating Suricata rules. Exit 1"
      exit 1
    fi
  else
    d3bug error "suricata-update not installed. Exit 1"
    exit 1
  fi
}


function checkSuricataRules()
# Check for last update
{
  d3bug

  if [[ -f "$_PROJECT_FILE_SURICATA_RULES" ]]
  then
    d3bug ok "$_PROJECT_FILE_SURICATA_RULES"

    if [[ "$CONF_global_autoupdate_rules_enable" == "TRUE" ]]
    then
      d3bug ok "Auto-Update enabled"

      # check for last update and perform it
      if [[ ! -f "$_PROJECT_FILE_SURICATA_RULES_TIMESTAMP" ]]
      then
        d3bug error "Timestamp not found. Updating..."
        updateSuricataRules
      else
        if [[ $(cat "$_PROJECT_FILE_SURICATA_RULES_TIMESTAMP") =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]
        then
          export lastUpdate="$((($(date +%s)-$(date +%s --date $(cat $_PROJECT_FILE_SURICATA_RULES_TIMESTAMP)))/(3600*24)))"
          if [[ "$lastUpdate" -gt "$CONF_global_autoupdate_rules_interval" ]]
          then
            d3bug error "Rules to old. Updating..."
            updateSuricataRules
          else
            d3bug info "Rules old $lastUpdate days. No need to update. ($CONF_global_autoupdate_rules_interval day interval)"
          fi
        else
          d3bug error "Rules never updated. Updating..."
          updateSuricataRules
        fi
      fi
    else
      d3bug info "Auto-Update disabled"
    fi
  else
    d3bug error "Suricata rules not found. Updating..."
    updateSuricataRules
  fi
}


function createProjectPipes()
# Create suriGUI pipes
# Pipes 3,4,5
{
  d3bug

  for pipe in "${_PROJECT_DB_PIPES[@]}"
  do
    # remove old pipe if exists
    if [[ -e $pipe ]]
    then
      if ! rm "$pipe"
      then
        d3bug error "Can't remove old pipe"
        exit 1
      #else
      #d3bug ok "Old Pipe found and deleted"

      fi
    fi

    # create a new one
    if ! mkfifo "$pipe"
    then
      d3bug error "Can't create pipe: $pipe"
      exit 1
    else
      d3bug ok "$pipe"
    fi
  done

  if exec 3<> "$_PROJECT_PIPE_MAIN"
  then
    d3bug ok "Project pipe started"
  else
    d3bug error "Can not start Project pipe. Exit 1"
    exit 1
  fi

}


function readSettingFile()
# Read suriGui.yaml and convert it to variables
# Print: readSettingFile "$_PROJECT_DIR_CONF/settings.yaml"
# Set variables: eval $(readSettingFile "$_PROJECT_DIR_CONF/settings.yaml")
{
  local file="$_PROJECT_FILE_CONFIG_NEW"
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
  sed -ne "s|^\($s\):|\1|" \
      -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
      -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $file |
  awk -F$fs '{
    indent = length($1)/2;
    vname[indent] = $2;
    for (i in vname) {if (i > indent) {delete vname[i]}}
    if (length($3) > 0) {
       vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
       printf("%s%s%s=\"%s\"\n", "CONF_",vn, $2, $3);
    }
  }'
}


function checkInternetConnection()
# Check if internet connection is present
{
  d3bug

  local pingComm="$(ping -q -c 1 -W 1 1.1.1.1 >/dev/null)"

  if ($pingComm)
  then
    d3bug ok "Internet connection is active"
  else
    d3bug error "No internet connection. Trying with Qubes proxy"

    export https_proxy="127.0.0.1:8082"

    if ($pingComm)
    then
      d3bug error "Internet connection not active. Exit 1"
      exit 1
    else
      d3bug ok "Internet found behind Qubes Proxy"
    fi
  fi
}


function checkProjectFiles()
# Make sure that the config files are present
# If not, copy default config
# clean default file if not neccessery
#only if touch is needed
{
  d3bug

  for file in "${_PROJECT_DB_FILES[@]}"
  do
    if [[ ! -f "$file" ]]
    then
      d3bug error "File not found: $file"
      fileName=$(basename $file)
      destination="$(dirname "${file}")"

      if ( cp "$_PROJECT_DIR_CONF/default/$fileName" "$destination" &>/dev/null)
      then
        d3bug ok "File created: $file"
      else
        d3bug error "Can't copy default config file: \"$fileName\" to directory: \"$destination\""
        exit 1
      fi
    else
      # d3bug info "Local ${file##*.} found: $file"
      d3bug ok "$file"
    fi
  done
}


function checkProjectDirectories()
# Create project directories and set permissions to user:user
{
  d3bug

  for dir in "${_PROJECT_DB_DIRS[@]}"
  do
    if [[ ! -d "$dir" ]]
    then
      if mkdir -p "$dir"
      then
        d3bug ok "Directory created: $dir"
      else
        d3bug error "Can not create directory: $dir"
        exit 1
      fi
    else
      if [[ -w "$dir" ]]
      then
        d3bug ok "$dir"
      else
        d3bug error "Directory: $dir is not writable."
        if sudo chown user:user "$dir" -R
        then
          d3bug info "Directory: $dir owned"
        else
          d3bug error "Something is wrong with folder/permission"
          exit 1
        fi
      fi
    fi
  done
}


function checkProjectDependencies()
# Install project dependencies
{
  d3bug

  for app in "${_PROJECT_DB_REQS[@]}"
  do
    if dpkg -s "$app" &>/dev/null
    then
      d3bug ok "$app"
    else
      d3bug error "$app not installed"

      yad --image="$_PROJECT_ICON_MAIN" --image-on-top \
          --title="$_PROJECT_NAME" \
          --button="Yes" --button="No" \
          --text="$app is not installed.\nDo you want to install it now?" &>/dev/null
      ret=$?
      if [[ $ret = 0 ]]
      then
        d3bug info "Installing $app ..."
        if sudo apt-get install "$app" -y &>/dev/null
        then
          d3bug ok "$app was successfully installed"
        else
          d3bug error "Can't install: $app"
          exit 1
        fi
      else
        d3bug error "If you do not want to install $app \nthen you can not use Suricata nor suriGUI."
        exit 1
      fi
    fi
  done
}


# Export functions for yad
export -f d3bug
export -f exitSuriGUI
export -f readConfigFile
export -f saveSettings
export -f suriGUISettings
export -f deleteIgnoredSID
export -f controlSuricataService
export -f updateSuricataRules
export -f updateSuriGUI
export -f send_notif


# S T A R T   S U R I G U I
# 0
checkProjectDependencies
checkProjectDirectories
checkProjectFiles
checkInternetConnection

# 1
# readSettingFile
eval export $(readSettingFile)
createProjectPipes

# 2
checkSuricataRules
checkCustomRules

# 3
checkSuricataStatus


# 4
registerProjectIcons
startSuriGUI &




while ( ! systemctl is-active --quiet suricata )
do
  ( systemctl is-active --quiet suricata ) && break
  d3bug info "Waiting for Suricata"
  sleep 5
done #&>/dev/null
d3bug info "Suricata is active"


while [[ ! -f "$_PROJECT_DIR_LOG/eve.json" ]]
do
  [[ -f "$_PROJECT_DIR_LOG/eve.json" ]] && break
  d3bug info "Waiting for log file"
  sleep 5
done #&>/dev/null
d3bug info "Log output found"


#readConfigFile notifications
[[ "${CONF_global_notifications_enable:-}" == "TRUE" ]] && startNotifDaemon

echo "$$" > "$_PROJECT_PID_MAIN"

while :
do
  [[ ! -f "$_PROJECT_PID_MAIN" ]] && break
  ( checkSuricataStatus ) #&>/dev/null
  sleep 5
done &>/dev/null

echo "End of script"

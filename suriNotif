#!/usr/bin/env bash

# God Mode: On
set -o nounset      # Exit on undefined variable
set -o errexit      # Exit on non-zero status
set -o pipefail     # Pipe return exit status


while [[ $suricataStatus != "active" ]] ; do
  checkSuricataStatus >/dev/null
  [[ $suricataStatus == "active" ]] && break
  d3bug info "Waiting for Suricata"
  sleep 5
done #&>/dev/null
d3bug info "Suricata is activ."


while [[ ! -f "$_PROJECT_ACTIVE_LOG/eve.json" ]] ; do
  [[ -f "$_PROJECT_ACTIVE_LOG/eve.json" ]] && break
  d3bug info "Waiting for log file"
  sleep 5
done #&>/dev/null
d3bug info "Log has been found"


/usr/lib/notification-daemon/notification-daemon &>/dev/null &
d3bug info "System notifications are active"


readConfigFile timeout
notify-send -i $_PROJECT_ICON -t $(( $configTimeout * 1000 )) "suriNotif started" &>/dev/null


tail -f "$_PROJECT_ACTIVE_LOG/eve.json" > >( \
  jq --unbuffered -r -c 'select(.event_type=="alert")' \
    | jq --unbuffered -r '@sh  "sid=\(.alert.signature_id) category=\(.alert.category) signature=\(.alert.signature) SRC=\(.src_ip) DEST=\(.dest_ip)  action=\(.alert.action)"' \
      | while read -r line; do \
        eval "$line" ; \
        notify-send -i $_PROJECT_ICON \
          -t $(($configTimeout * 1000 )) \
          "$category" \
          "$(echo -e "Signature: $signature \nSID: $sid \nSource: $SRC \nDestination: $DEST  \nAction: $action")" ; \
      done )

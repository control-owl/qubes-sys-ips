#!/usr/bin/env bash
#
# coder: ro0t
# stamp: 0.211212-new-life

# God Mode: On
set -o nounset      # Exit on undefined variable
set -o errexit      # Exit on non-zero status
set -o pipefail     # Pipe return exit status

trap 'echo "$BASH_COMMAND" failed with error code $?' ERR
trap "kill 0" EXIT



function exitSuriGUI() {
  echo -e "$timeShort \e[41;30m EXITING... \e[0m"

  # rm  "$_PROJECT_DIR_TMP/*.pid"  #&& rm *.pid
  find $_PROJECT_DIR_TMP -maxdepth 1 -type f -name "*.pid" -delete

  source $_PROJECT_CONFIG_FILE
  [[ $keep != "TRUE" ]] && echo "delete log"

  stopSuricataService exit
}
export -f exitSuriGUI
trap exitSuriGUI SIGINT SIGHUP SIGTERM SIGUSR1 SIGUSR2


if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit 1
fi


function d3bug() {
  case "${1:-*}" in
    "info" )    echo "$(date +"%H:%M:%S") |   |__ $2" ;;
    "error" )   echo -e "$(date +"%H:%M:%S") |__ \e[41;30m$2\e[0m" ;;
    *)          echo "$(date +"%H:%M:%S") |__ ${FUNCNAME[1]}" ;;
  esac
}
export -f d3bug


function createDir() {
  if [[ ! -d "$1" ]]; then
    mkdir -p "$1"
    d3bug info "Directory created: $1"
  else
    d3bug info "Directory found: $1"
  fi
}
export -f createDir


export timeShort=$(date +"%H:%M:%S")
export dateShort=$(date +"%Y-%m-%d")
export dateLong=$(date +"%Y-%m-%d-%H-%M-%S")

export _PROJECT_NAME="suriGUI" && echo -e "$timeShort \e[42;30m  $_PROJECT_NAME  \e[0m"

export _PROJECT_VER="0.6"
export _PROJECT_BUILD="2021-12-12"
export _PROJECT_DIR="/usr/share/suriGUI"        && createDir "${_##*=}"
export _PROJECT_DIR_RES="$_PROJECT_DIR/res"     && createDir "${_##*=}"
export _PROJECT_DIR_TMP="$_PROJECT_DIR/tmp"     && createDir "${_##*=}"
export _PROJECT_DIR_CONF="$_PROJECT_DIR/conf"   && createDir "${_##*=}"
export _PROJECT_DIR_LOG="$_PROJECT_DIR/log"     && createDir "${_##*=}"

export _PROJECT_CONFIG_FILE="$_PROJECT_DIR_CONF/suriGUI.conf"
export _PROJECT_PIPE="$_PROJECT_DIR_TMP/suri.pipe"

export _PROJECT_ICON="$_PROJECT_DIR_RES/suriGUI.png"
export _PROJECT_ICON_INACTIVE="$_PROJECT_DIR_RES/inactive-icon.png"
export _PROJECT_ICON_ACTIVE="$_PROJECT_DIR_RES/active-icon.png"

export _SURICATA_CONFIG="$_PROJECT_DIR_CONF/suricata.yaml"
export _SURICATA_RULES="$_PROJECT_DIR_CONF/suricata.rules"
export _SURICATA_UPDATE_TIMESTAMP="$_SURICATA_RULES.timestamp"
export _SURICATA_LOG="$_PROJECT_DIR_LOG/$dateShort"

export _SURICATA_PID="$_PROJECT_DIR_TMP/suricata.pid"
export _PROJECT_PID="$_PROJECT_DIR_TMP/suriGUI.pid"  && echo "$$" > "$_PROJECT_PID"
export _NOTIF_PID="$_PROJECT_DIR_TMP/suriNotif.pid"
export _DAEMON_PID="$_PROJECT_DIR_TMP/notification-daemon.pid"

export _NOTIF_TIMEOUT="2000"
export _SURICATA_OUTDATE="7"

function checkConfig () {
  d3bug

  if [[ ! -f "$_PROJECT_CONFIG_FILE" ]] ; then
    if [[ ! -f "$_PROJECT_CONFIG_FILE.default" ]] ; then
      d3bug info "Creating new config file"
      echo -e "notifications=TRUE\ntimeout=5\naction=rejectboth\nupdate=7\nkeep=TRUE\nduration=30" > $_PROJECT_CONFIG_FILE.1
    else
      d3bug info "Creating new config file"
      cp "$_PROJECT_CONFIG_FILE.default" "$_PROJECT_CONFIG_FILE"
    fi

  else
    d3bug info "Config found"
  fi


}
export -f checkConfig


function checkRequirements () {
  d3bug

  apps=( libnetfilter-queue-dev suricata jq libnotify-bin )

  for i in "${apps[@]}" ; do
    if dpkg -s $i &>/dev/null; then
      d3bug info "$i installed"
    else
      d3bug error "$i not found"

      yad --title="$_PROJECT_NAME" --text="$i is not installed.\nDo you want to install it now?" --button="Yes" --button="No"
      ret=$?
      if [ $ret = 0 ] ; then
       apt-get install $i -y
      else
       exit 1
      fi
    fi
  done

  if systemctl is-active --quiet suricata; then systemctl disable suricata && systemctl stop suricata ; fi

}
export -f checkRequirements


function createProjectPipe() {
  d3bug

  [[ -e $_PROJECT_PIPE ]] && rm "$_PROJECT_PIPE"

  if mkfifo "$_PROJECT_PIPE" ; then
    d3bug info "Pipe created"
  else
    d3bug error "Can't create pipe"
    exit 1
  fi

  exec 3<> "$_PROJECT_PIPE" && d3bug info "Pipe started"
}
export -f createProjectPipe


function readConfigFile() {
  source "$_PROJECT_CONFIG_FILE"

  case "$1" in
    "action" )
      defaultActions="alert\!pass\!drop\!reject\!rejectsrc\!rejectdst\!rejectboth"
      makeDefault="^"
      export configAction=$(echo "$defaultActions" | sed "s/$action/$makeDefault$action/g")
    ;;
    "update" ) export configUpdate="$update" ;;
    "timeout" ) export configTimeout="$timeout" ;;
    "duration" ) export configDuration="$duration" ;;
    "notifications" ) export configNotifications="$notifications" ;;
    "keep" ) export configKeep="$keep" ;;
  esac
}
export -f readConfigFile


function updateConfigFile() {
  d3bug

  case "$1" in
    "tab1" )
            sed -i "s/^\(notifications\s*=\s*\).*\$/\1$2/" "$_PROJECT_CONFIG_FILE"
            sed -i "s/^\(timeout\s*=\s*\).*\$/\1$3/" "$_PROJECT_CONFIG_FILE"
            sed -i "s/^\(keep\s*=\s*\).*\$/\1$4/" "$_PROJECT_CONFIG_FILE"
            sed -i "s/^\(duration\s*=\s*\).*\$/\1$5/" "$_PROJECT_CONFIG_FILE"

            d3bug info "Notifications: $2"
            d3bug info "Timeout: $3 second(s)"
            d3bug info "Keep log: $4"
            d3bug info "Log duration: $5"

            [[ $2 == "TRUE" ]] && startNotifDaemon || stopNotifDaemon

      ;;
    "rules" )
            source "$_PROJECT_CONFIG_FILE"
            sed -i "s/$action/$2/" "$_SURICATA_RULES"

            sed -i "s/^\(action\s*=\s*\).*\$/\1$2/" "$_PROJECT_CONFIG_FILE"
            sed -i "s/^\(update\s*=\s*\).*\$/\1$3/" "$_PROJECT_CONFIG_FILE"

            checkSuricataStatus
            if [[ $suricataStatus == "active" ]] ; then
              suricatasc -c ruleset-reload-nonblockin
              d3bug info "Rules updated & reloaded"
            else
              d3bug info "Rules updated"
            fi

            d3bug info "New Rules: $2"
            d3bug info "Update Rules every: $3 day(s)"
      ;;
  esac
}
export -f updateConfigFile


function suriGUISettings() {
  d3bug

  KEY=$RANDOM

  readConfigFile notifications
  readConfigFile timeout
  readConfigFile keep
  readConfigFile duration

  yad --plug=$KEY --tabnum=1 --form \
      --field="<b>\t\t\t\t\t\tIn developement</b>":LBL "" \
      --field="Notifications":chk "$configNotifications" \
      --field="Timeout in seconds:NUM" "$configTimeout\!1..60\!1\!0" \
      --field="":LBL "" \
      --field="Keep log":chk "$configKeep" \
      --field="Log in days:NUM" "$configDuration\!1..60\!1\!0" \
      --field="":LBL "" \
      --field="Apply settings":fbtn 'bash -c "updateConfigFile tab1 %2 %3 %5 %6"' \
      --field="Start IPS":fbtn 'bash -c "startSuricataService"' \
      --field="Stop":fbtn 'bash -c "stopSuricataService"' \
      &


  yad --plug=$KEY --tabnum=2 --form \
      --field="":LBL "" \
      --field="<b>Files</b>":LBL "" \
      --field="IPS config file:":FL "$_SURICATA_CONFIG" \
      --field="Suricata rules:":FL "$_SURICATA_RULES" \
      \
      --field="":LBL "" \
      --field="<b>Log</b>":LBL "" \
      --field="Log directory:":dir "$_PROJECT_DIR_LOG" \
      \
      --file-filter="Yaml files (*.yaml)| *.yaml" --file-filter="Config Files (*.cfg *.conf)| *.cfg *.conf" \
      --file-filter="All Files | *.*" &

  readConfigFile action
  readConfigFile update

  yad --plug=$KEY --tabnum=3 --form \
      --field="Default rule action":CB "$configAction" \
      --field="<b>alert</b> - generate an alert":LBL "" \
      --field="<b>pass</b> - stop further inspection of the packet":LBL "" \
      --field="<b>drop</b> - drop packet and generate alert":LBL "" \
      --field="<b>reject</b> - send RST/ICMP unreach error to the sender of the matching packet.":LBL "" \
      --field="<b>rejectsrc</b> - same as just reject":LBL "" \
      --field="<b>rejectdst</b> - send RST/ICMP error packet to receiver of the matching packet.":LBL "" \
      --field="<b>rejectboth</b> - send RST/ICMP error packets to both sides of the conversation.":LBL "" \
      --field="":LBL "" \
      --field="<b>Update</b>":LBL "" \
      --field="Update rules (days):NUM" "$configUpdate\!1..365\!1\!0" \
      --field="Apply":fbtn 'bash -c "updateConfigFile rules %1 %11"' \
      --field="Update rules now":fbtn 'bash -c "updateSuricataRules"' &


  TXT=$"  <b>$_PROJECT_NAME</b>   Version: <b>$_PROJECT_VER</b>    Build: <b>$_PROJECT_BUILD</b>\\n\\n"
  TXT+=$"  OS: $(lsb_release -ds) on $(hostname)\\n"
  TXT+=$"  Kernel: $(uname -sr)\\n\\n"
  TXT+="  <i>$(uptime)</i>"

  yad --notebook --width=600 --height=350 --center --auto-kill \
      --title=$"suriGUI Settings" --text="$TXT" \
      --window-icon="$_PROJECT_ICON" --image="$_PROJECT_ICON" --image-on-top \
      --auto-kill \
      --key=$KEY --tab=$"suriGUI" --tab=$"Suricata" --tab=$"Rules"
      # --button="<b>Start</b>!gtk-yes:1"  \
      # --button="Stop!gtk-no:2"

  # if [ $? = 1 ]; then
  #   startSuricataService
  # elif [ $? = 2 ]; then
  #   stopSuricataService
  # else
  #   :
  # fi


}
export -f suriGUISettings


function suriOnClick() {
  d3bug

  suriGUISettings

}
export -f suriOnClick


function stopSuricataService() {
  d3bug

  suricatasc -c shutdown 1>&- 2>&-
  d3bug info "Suricata stopped"
  updateTrayMenu inactive
}
export -f stopSuricataService


function checkIptables() {
  d3bug
  if iptables -C FORWARD -m mark ! --mark 1/1 -j NFQUEUE 1>&- 2>&- ; then
    d3bug info "iptables already set"
  else
    iptables -I FORWARD -m mark ! --mark 1/1 -j NFQUEUE
    d3bug info "NFQueue set"
  fi

}
export -f checkIptables


function isProcessAlive() {
  if [[ -f "$_PROJECT_DIR_TMP/$1.pid" ]] ; then
    if ps aux | grep "$(cat $_PROJECT_DIR_TMP/$1.pid)" >/dev/null ; then
      export processIs="Alive"
     else
       export processIs="Dead"
     fi
   else
     export processIs="Dead"
   fi

   d3bug info "$1 is $processIs"
}
export -f isProcessAlive



function stopNotifDaemon() {
  d3bug

  d3bug info "Stopping notifications"
  [[ -f "$_NOTIF_PID" ]] && kill -9 "$(cat $_NOTIF_PID)" && rm "$_NOTIF_PID"
  #[[ -f "$_DAEMON_PID" ]] && kill -9 "$(cat $_DAEMON_PID)" && rm "$_DAEMON_PID"

}
export -f stopNotifDaemon



function startNotifDaemon() {
  d3bug

  #check config file first
  readConfigFile notifications

  if [[ $configNotifications == "TRUE" ]] ; then
    isProcessAlive "notification-daemon"

    if [[ $processIs == "Dead" ]] ; then
      /usr/lib/notification-daemon/notification-daemon &
      echo "$!" > "$_DAEMON_PID"
      d3bug info "notification-daemon started with PID: $(cat $_DAEMON_PID)"
    else
      d3bug info "notification-daemon already running"
    fi

    unset processIs
    isProcessAlive "suriNotif"

    if [[ $processIs == "Dead" ]] ; then
      bash suriNotif &
      echo "$!" > "$_NOTIF_PID"
      d3bug info "suriNotif started with PID: $(cat $_NOTIF_PID)"
    else
      d3bug info "suriNotif already running"
    fi
    unset processIs
  else
    d3bug info "Notifications are disabled"
  fi
}
export -f startNotifDaemon


function startSuricataService() {
  d3bug

  isProcessAlive "suricata"

  if [[ $processIs == "Dead" ]] ; then
     /usr/bin/suricata -c $_SURICATA_CONFIG -q 0 --pidfile $_SURICATA_PID -S $_SURICATA_RULES -l $_SURICATA_LOG  1>&- 2>&- &
   else
     d3bug info "Nothing to do"
   fi
   unset processIs

  checkIptables
}
export -f startSuricataService


function updateTrayIcon() {
  d3bug

  case "$1" in
    starting )
      until  [[ $(pstree -p $(cat $_SURICATA_PID) | perl -ne 'print "$1\n" while /\((\d+)\)/g' 2>/dev/null | wc -l  ) -gt 1 ]] ; do
        exec 3<>$_PROJECT_PIPE echo "icon:$_PROJECT_NAME-active" >&3 &
        sleep 0.5
        exec 3<>$_PROJECT_PIPE echo "icon:$_PROJECT_NAME-inactive" >&3 &
        sleep 0.5
        #exec 3<>$_PROJECT_PIPE echo "visible:blink" >&3 &
      done
      ;;
    * )
      [[ -p $_PROJECT_PIPE ]] && exec 3<>$_PROJECT_PIPE echo "icon:$_PROJECT_NAME-$1" >&3 &

      d3bug info "Tray icon updated: $1"
    ;;
  esac

}
export -f updateTrayIcon


function updateTrayMenu() {
  d3bug

  if [[ "${suricataStatus:-unknown}" == "$1" ]]
  then
    d3bug info "Nothing changed"
  else
    case "$1" in
      "active") menu="Stop!bash -c stopSuricataService" ;;
      "inactive") menu="Start!bash -c startSuricataService" ;;
      "starting") menu="" ;;
      *)    exit 1          ;;
    esac

    menu+="||Settings!bash -c suriGUISettings"
    menu+="||Exit!bash -c exitSuriGUI"

    [[ -p $_PROJECT_PIPE ]] && exec 3<>$_PROJECT_PIPE echo "menu:$menu" >&3 &

    d3bug info "Menu updated: $1"

    updateTrayIcon $1
  fi
}
export -f updateTrayMenu


function checkSuricataStatus() {
  d3bug

  if ps -p $(cat $_SURICATA_PID 2>/dev/null) &>/dev/null; then
    if [[ $(pstree -p $(cat $_SURICATA_PID) | perl -ne 'print "$1\n" while /\((\d+)\)/g' 2>/dev/null | wc -l  ) -gt 1 ]] ; then
      d3bug info "Suricata is active"
      updateTrayMenu active
      export suricataStatus=active
    else
      d3bug info "Suricata is starting"
      updateTrayMenu starting
      export suricataStatus=starting
    fi
  else
    d3bug info "Suricata is inactive"
    updateTrayMenu inactive
    export suricataStatus=inactive
  fi
}
export -f checkSuricataStatus


function updateSuricataRules() {
  d3bug

  if ping -q -c 1 -W 1 github.com >/dev/null ; then
    d3bug info "Internet connection active."
  else
    d3bug error "No internet connection. Trying Qubes Proxy..."

    export https_proxy=127.0.0.1:8082
    if ping -q -c 1 -W 1 github.com >/dev/null ; then
      d3bug error "Check your internet connection. Exiting..."
      exit 1
    else
      d3gub info "Internet found behing Qubes Proxy. Resuming update..."
    fi
  fi

  if command -v suricata-update ; then
    if suricata-update --output "$_PROJECT_DIR_CONF" \
                       --data-dir "$_PROJECT_DIR_CONF" \
                       --no-test  ; then

      checkSuricataStatus
      if [[ $suricataStatus == "active" ]] ; then
        suricatasc -c ruleset-reload-nonblockin
        d3bug info "Rules updated & reloaded"
      else
        d3bug info "Rules updated"
      fi

      echo "$dateShort" > "$_SURICATA_UPDATE_TIMESTAMP"
      d3bug info "Update finished."
      updateConfigFile action alert
    else
      d3bug error "Error updating Suricata rules. Exiting..."
      exit 1
    fi
  else
    d3bug error "suricata-update not installed. Aborting"
    exit 1
  fi

}
export -f updateSuricataRules


function checkSuricataRules() {
  d3bug

  if [[ -f "$_SURICATA_UPDATE_TIMESTAMP" ]]; then
    if [[ $(cat $_SURICATA_UPDATE_TIMESTAMP) =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
      export lastUpdate="$((($(date +%s)-$(date +%s --date $(cat $_SURICATA_UPDATE_TIMESTAMP)))/(3600*24)))"
      if [[ "$lastUpdate" -gt "$_SURICATA_OUTDATE" ]]; then
        d3bug error "Rules to old"
        updateSuricataRules
      else
        d3bug info "Rules old $lastUpdate days. No need to update."
      fi
    else
        d3bug error "Rules never updated. Updating..."
        updateSuricataRules
    fi
  else
    d3bug error "Timestamp not found. Updating..."
    updateSuricataRules
  fi

}
export -f checkSuricataRules


function startSuriGUIDaemon() {
  d3bug

  d3bug info "Starting $_PROJECT_NAME $_PROJECT_VER"

  xdg-icon-resource install --context mimetypes --size 48 "$_PROJECT_ICON_INACTIVE" "$_PROJECT_NAME-inactive"
  xdg-icon-resource install --context mimetypes --size 48 "$_PROJECT_ICON_ACTIVE" "$_PROJECT_NAME-active"

  yad --notification --no-middle --listen \
    --text="$_PROJECT_NAME v$_PROJECT_VER" \
    --image="$_PROJECT_NAME-inactive" \
    --separator="|" \
    --menu="${suriTrayMenuList:-Exit!bash -c exitSuriGUI}" \
    --command="bash -c suriOnClick" <&3 &

  d3bug info "Daemon started"
}
export -f startSuriGUIDaemon


checkRequirements
checkConfig
createProjectPipe
checkSuricataRules
checkSuricataStatus
startNotifDaemon
startSuriGUIDaemon


while : ; do
  [[ ! -f "$_PROJECT_PID" ]] && break
  checkSuricataStatus
  sleep 3
done >/dev/null 2>&1

#!/usr/bin/env bash
#
# coder: ro0t
# stamp: 0.211126-blackfriday

# God Mode: On
set -o nounset      # Exit on undefined variable
set -o errexit      # Exit on non-zero status
set -o pipefail     # Pipe return exit status

trap 'echo "$BASH_COMMAND" failed with error code $?' ERR


if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit 1
fi


function d3bug() {
  case "${1:-*}" in
    "info" )    echo "$(date +"%H:%M:%S") |   |__ $2" ;;
    "error" )   echo -e "$(date +"%H:%M:%S") |__ \e[41;30m$2\e[0m" ;;
    *)          echo "$(date +"%H:%M:%S") |__ ${FUNCNAME[1]}" ;;
  esac
}
export -f d3bug


function createDir() {
  if [[ ! -d "$1" ]]; then
    mkdir -p "$1"
    d3bug info "Directory created: $1"
  else
    d3bug info "Directory found: $1"
  fi
}
export -f createDir


export dateShort=$(date +"%H:%M:%S")
export dateLong=$(date +"%Y-%m-%d-%H-%M-%S")

export _PROJECT_NAME="suriGUI" && echo -e "$dateShort \e[42;30m  $_PROJECT_NAME  \e[0m"

export _PROJECT_VER="0.5"
export _PROJECT_BUILD="2021-12-04"
export _PROJECT_DIR="/usr/share/suriGUI"        && createDir "${_##*=}"
export _PROJECT_DIR_RES="$_PROJECT_DIR/res"     && createDir "${_##*=}"
export _PROJECT_DIR_TMP="$_PROJECT_DIR/tmp"     && createDir "${_##*=}"
export _PROJECT_DIR_CONF="$_PROJECT_DIR/conf"   && createDir "${_##*=}"
export _PROJECT_DIR_LOG="$_PROJECT_DIR/log"     && createDir "${_##*=}"

export _PROJECT_CONFIG_FILE="$_PROJECT_DIR_CONF/suriGUI.conf"
export _PROJECT_PIPE="$_PROJECT_DIR_TMP/suri.pipe"

export _PROJECT_ICON_INACTIVE="$_PROJECT_DIR_RES/inactive-icon.png"
export _PROJECT_ICON_ACTIVE="$_PROJECT_DIR_RES/active-icon.png"

export _SURICATA_CONFIG_IDS="$_PROJECT_DIR_CONF/suricataIDS.yaml"
export _SURICATA_CONFIG_IPS="$_PROJECT_DIR_CONF/suricataIPS.yaml"
export _SURICATA_RULES="$_PROJECT_DIR_CONF/suricata.rules"
export _SURICATA_UPDATE_TIMESTAMP="$_SURICATA_RULES.timestamp"
export _SURICATA_LOG="$_PROJECT_DIR_LOG/$_PROJECT_NAME-$dateLong.log"
export _SURICATA_OUTDATE="14"
export _SURICATA_PID="$_PROJECT_DIR_TMP/suricata.pid"


function exitSuriGUI() {
  echo -e "$dateShort \e[41;30m  EXITING  \e[0m"

  [[ -p $_PROJECT_PIPE ]] && exec 3<>$_PROJECT_PIPE echo "quit" >&3 &
  exec 3<&-
  rm $_PROJECT_PIPE 1>&- 2>&-

  for f in $(ls -1 $_PROJECT_DIR_TMP/*.pid) ; do
    d3bug info "Closing $f with PID $(cat $f)"
    kill -9 $(cat $f) 1>&- 2>&-
    rm $f
  done
  stopSuricataService exit

  #[[ -d $_PROJECT_DIR_TMP ]] && rm "$_PROJECT_DIR_TMP" -R

}
export -f exitSuriGUI
trap exitSuriGUI SIGINT SIGHUP SIGTERM SIGUSR1 SIGUSR2
trap "rm $_PROJECT_DIR_TMP -R" EXIT

function checkRequirements () {
  d3bug

  apps=( libnetfilter-queue-dev suricata jq libnotify-bin )

  for i in "${apps[@]}" ; do
    if dpkg -s $i &>/dev/null; then
      d3bug info "$i installed"
    else
      d3bug error "$i not found"

      yad --title="$_PROJECT_NAME" --text="$i is not installed.\nDo you want to install it now?" --button="Yes" --button="No"
      ret=$?
      if [ $ret = 0 ] ; then
       apt-get install $i -y
      else
       exit 1
      fi
    fi
  done

  if systemctl is-active --quiet suricata; then systemctl disable suricata && systemctl stop suricata ; fi

}
export -f checkRequirements


function createProjectPipe() {
  d3bug

  [[ -e $_PROJECT_PIPE ]] && rm "$_PROJECT_PIPE"

  if mkfifo "$_PROJECT_PIPE" ; then
    d3bug info "Pipe created"
  else
    d3bug error "Can't create pipe"
    exit 1
  fi

  exec 3<> "$_PROJECT_PIPE" && d3bug info "Pipe started"
}
export -f createProjectPipe


function createProjectPipe() {
  d3bug

  [[ -e $_PROJECT_PIPE ]] && rm "$_PROJECT_PIPE"

  if mkfifo "$_PROJECT_PIPE" ; then
    d3bug info "Pipe created"
  else
    d3bug error "Can't create pipe"
    exit 1
  fi

  exec 3<> "$_PROJECT_PIPE" && d3bug info "Pipe started"
}
export -f createProjectPipe






function readConfigFile() {
  source "$_PROJECT_CONFIG_FILE"

  case "$1" in
    "action" )
      defaultActions="alert\!pass\!drop\!reject\!rejectsrc\!rejectdst\!rejectboth"
      makeDefault="^"
      export newMenu=$(echo "$defaultActions" | sed "s/$action/$makeDefault$action/g")
    ;;
    "mode" )
      defaultMode="IDS\!IPS"
      makeDefault="^"
      export newMode=$(echo "$defaultMode" | sed "s/$mode/$makeDefault$mode/g")
    ;;
  esac


}
export -f readConfigFile


function updateSuricataAction() {
  d3bug
# call old action
  readConfigFile action

  echo "old action: $action"
  echo "new action: $1"
  sed -i "s/$action/$1/" "$_SURICATA_RULES"
  updateConfigFile "action" $1
}
export -f updateSuricataAction



function updateSuricataMode() {
  d3bug

  d3bug info "Stopping Suricata service"

  stopSuricataService

  readConfigFile action
  d3bug info "Suricata old mode: $mode"
  d3bug info "Suricata new mode: $1"

  updateConfigFile "mode" $1
  startSuricataService




}
export -f updateSuricataMode



function updateConfigFile() {
  d3bug
  sed -i "s/^\($1\s*=\s*\).*\$/\1$2/" "$_PROJECT_CONFIG_FILE"
  d3bug info "Config updated $1 = $2"
}
export -f updateConfigFile




function suriGUISettings() {
  d3bug

  KEY=$RANDOM

  yad --plug=$KEY --tabnum=1 --form \
      --field="<b>In developement</b>":LBL "" \ &
  #echo $! > "$_PROJECT_DIR_TMP/tab1.pid"

  readConfigFile mode

  yad --plug=$KEY --tabnum=2 --form \
      --field="<b>Mode</b>":LBL "" \
      --field="Suricata mode":CB "$newMode" \
      --field="Apply":fbtn 'bash -c "updateSuricataMode %2"' \
      \
      --field="":LBL "" \
      --field="<b>Files</b>":LBL "" \
      --field="IDS config file:":FL "$_SURICATA_CONFIG_IDS" \
      --field="IPS config file:":FL "$_SURICATA_CONFIG_IPS" \
      --field="Suricata rules:":FL "$_SURICATA_RULES" \
      \
      --field="":LBL "" \
      --field="<b>Log</b>":LBL "" \
      --field="Log directory:":dir "$_PROJECT_DIR_LOG" \
      --field="Persistant log":chk "TRUE" \
      \
      --file-filter="Yaml files (*.yaml)| *.yaml" --file-filter="Config Files (*.cfg *.conf)| *.cfg *.conf" \
      --file-filter="All Files | *.*" &
  #echo $! > "$_PROJECT_DIR_TMP/tab2.pid"

  readConfigFile action

  yad --plug=$KEY --tabnum=3 --form \
      --field="Default rule action":CB "$newMenu" \
      --field="<b>alert</b> - generate an alert":LBL "" \
      --field="<b>pass</b> - stop further inspection of the packet":LBL "" \
      --field="<b>drop</b> - drop packet and generate alert":LBL "" \
      --field="<b>reject</b> - send RST/ICMP unreach error to the sender of the matching packet.":LBL "" \
      --field="<b>rejectsrc</b> - same as just reject":LBL "" \
      --field="<b>rejectdst</b> - send RST/ICMP error packet to receiver of the matching packet.":LBL "" \
      --field="<b>rejectboth</b> - send RST/ICMP error packets to both sides of the conversation.":LBL "" \
      --field="Apply":fbtn 'bash -c "updateSuricataAction %1"' \
      --field="":LBL "" \
      --field="<b>Update</b>":LBL "" \
      --field="Number:NUM" "0\!10..60\!1\!1" \
      --field="Apply":fbtn 'bash -c "updateSuricataAction %12"' &
  #echo $! > "$_PROJECT_DIR_TMP/tab3.pid"


  TXT=$"  <b>$_PROJECT_NAME</b>   Version: <b>$_PROJECT_VER</b>    Build: <b>$_PROJECT_BUILD</b>\\n\\n"
  TXT+=$"  OS: $(lsb_release -ds) on $(hostname)\\n"
  TXT+=$"  Kernel: $(uname -sr)\\n\\n"
  TXT+="  <i>$(uptime)</i>"

  yad --notebook --width=600 --height=350 --center --auto-kill \
      --title=$"suriGUI Settings" --text="$TXT" \
      --window-icon="utilities-terminal" --image="utilities-terminal" --image-on-top \
      --no-buttons --auto-kill \
      --key=$KEY --tab=$"suriGUI" --tab=$"Suricata" --tab=$"Rules" &
  #echo $! > "$_PROJECT_DIR_TMP/notebook.pid"

}
export -f suriGUISettings


function suriOnClick() {
  d3bug

  #echo "clicked"
  #echo "quit" >&3
  #exec 3<>$_PROJECT_PIPE echo "icon:gtk-help" >&3 &
  suriGUISettings

}
export -f suriOnClick


function stopSuricataService() {
  d3bug

  suricatasc -c shutdown 1>&- 2>&-

  # case $1 in
  #   exit ) : ;;
  #   *)
  #     sleep 5
  #     d3bug info "Suricata stopped"
  #     updateTrayMenu inactive
      # [[ -f $_SURICATA_PID ]] && rm $_SURICATA_PID
  #   ;;
  # esac



}
export -f stopSuricataService


function startSuricataService() {
  d3bug

  source "$_PROJECT_CONFIG_FILE"

  case "$mode" in
    "IDS" ) config="-c $_SURICATA_CONFIG_IDS -i eth0"
      ;;
    "IPS" ) config="-c $_SURICATA_CONFIG_IPS -q 0"
      ;;
    * ) d3bug error "Suricata mode unknown."
        exit 1
      ;;
  esac
  d3bug info "Starting Suricata in $mode mode"

  /usr/bin/suricata $config --pidfile $_SURICATA_PID -S $_SURICATA_RULES  -l $_PROJECT_DIR_LOG  1>&- 2>&- &
}
export -f startSuricataService


function updateTrayIcon() {
  d3bug

  [[ -p $_PROJECT_PIPE ]] && exec 3<>$_PROJECT_PIPE echo "icon:$_PROJECT_NAME-$1" >&3 &

  d3bug info "Tray icon updated: $1"

}
export -f updateTrayIcon


function updateTrayMenu() {
  d3bug

  case "$1" in
    "active") menu="Stop!bash -c stopSuricataService" ;;
    "inactive") menu="Start!bash -c startSuricataService" ;;
    *)    exit 1          ;;
  esac


  menu+="|Status!bash -c checkSuricataStatus||Settings!bash -c suriGUISettings"
  menu+="||Exit!bash -c exitSuriGUI"

  [[ -p $_PROJECT_PIPE ]] && exec 3<>$_PROJECT_PIPE echo "menu:$menu" >&3 &

  d3bug info "Menu updated: $1"

  updateTrayIcon $1
}
export -f updateTrayMenu


function checkSuricataStatus() {
  d3bug

  # if [[ -f $_SURICATA_PID ]] ; then
    if ps -p $(cat $_SURICATA_PID 2>/dev/null) &>/dev/null; then
        d3bug info "Suricata is active"
        updateTrayMenu active
        export suricataStatus=active
    else
      #rm $_SURICATA_PID
      d3bug info "Suricata is inactive"
      updateTrayMenu inactive
      export suricataStatus=inactive
    fi
  # else
  #   #rm $_SURICATA_PID
  #   d3bug info "Suricata is inactive"
  #   updateTrayMenu inactive
  #   export suricataStatus=inactive
  # fi
}
export -f checkSuricataStatus


function updateSuricataRules() {
  d3bug

  # create gui window which asks user do they want to update

  if ping -q -c 1 -W 1 github.com >/dev/null ; then
    d3bug info "Internet connection active."
  else
    d3bug error "No internet connection. Trying Qubes Proxy..."

    export https_proxy=127.0.0.1:8082
    if ping -q -c 1 -W 1 github.com >/dev/null ; then
      d3bug error "Check your internet connection. Exiting..."
      exit 1
    else
      d3gub info "Internet found behing Qubes Proxy. Resuming update..."
    fi
  fi

#check for mode



  if command -v suricata-update ; then
    if suricata-update --output "$_PROJECT_DIR_CONF" \
                       --data-dir "$_PROJECT_DIR_CONF" \
                       --no-test >/dev/null ; then
      if suricatasc -c ruleset-reload-nonblocking ; then
        d3bug info "Rules reloaded"
      else
        d3bug error "New rules can not be applied. Exiting..."
        exit 1
      fi

      echo "$dateShort" > "$_SURICATA_UPDATE_TIMESTAMP"
      d3bug info "Update finished."
      updateConfigFile action alert
    else
      d3bug error "Error updating Suricata rules. Exiting..."
      exit 1
    fi
  else
    d3bug error "suricata-update not installed. Aborting"
    exit 1

  fi

}
export -f updateSuricataRules


function checkSuricataRules() {
  d3bug

  if [[ -f "$_SURICATA_UPDATE_TIMESTAMP" ]]; then
    if [[ $(cat $_SURICATA_UPDATE_TIMESTAMP) =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
      export lastUpdate="$((($(date +%s)-$(date +%s --date $(cat $_SURICATA_UPDATE_TIMESTAMP)))/(3600*24)))"
      #d3bug info "Rules old $lastUpdate days"
      if [[ "$lastUpdate" -gt "$_SURICATA_OUTDATE" ]]; then
        d3bug error "Rules to old"
        updateSuricataRules
      else
        d3bug info "Rules old $lastUpdate days. No need to update."
      fi
    else
        d3bug error "Rules never updated. Updating..."
        updateSuricataRules
    fi
  else
    d3bug error "Timestamp not found. Updating..."
    updateSuricataRules
  fi

}
export -f checkSuricataRules


function startSuriGUIDaemon() {
  d3bug

  d3bug info "Starting $_PROJECT_NAME $_PROJECT_VER"

  xdg-icon-resource install --context mimetypes \
                            --size 48 \
                            "$_PROJECT_ICON_ACTIVE" \
                            "$_PROJECT_NAME-active"


  xdg-icon-resource install --context mimetypes \
                            --size 48 \
                            "$_PROJECT_ICON_INACTIVE" \
                            "$_PROJECT_NAME-inactive"

  d3bug info "Icons created"

  yad --notification --no-middle --listen \
    --text="$_PROJECT_NAME v$_PROJECT_VER" \
    --image="$_PROJECT_NAME-inactive" \
    --separator="|" \
    --menu="${suriTrayMenuList:-Exit!bash -c exitSuriGUI}" \
    --command="bash -c suriOnClick" <&3 &
  echo $! > "$_PROJECT_DIR_TMP/suriGUIDaemon.pid"

  d3bug info "Daemon started"
}
export -f startSuriGUIDaemon

checkRequirements
createProjectPipe
checkSuricataRules
checkSuricataStatus
#[[ $suricataStatus != "active" ]] && startSuricataService
startSuriGUIDaemon



# while true ; do
#     checkSuricataStatus
#     sleep 5
# done #>/dev/null 2>&1


while : ; do
    [[ ! -f "$_PROJECT_DIR_TMP/suriGUIDaemon.pid" ]] && break
    echo "Pausing until file exists."
    checkSuricataStatus
    sleep 10
done >/dev/null 2>&1
exit 0

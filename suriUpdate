#!/usr/bin/env bash
#
# coder: ro0t
# stamp: 0.211217-new-try

# God Mode: On
set -o nounset      # Exit on undefined variable
set -o errexit      # Exit on non-zero status
set -o pipefail     # Pipe return exit status


notify_cmd='notify-send -u critical "$TITLE" "$DESCRIPTION"'

function suriUpdateNotify() {
  local TITLE="$1"
  local DESCRIPTION="$2"

  if [ -n "$notify_cmd" ]; then
    eval $notify_cmd
  fi

  date "+%x %X"
  echo "$TITLE"
  if [ -n "$DESCRIPTION" ]; then
    echo "$DESCRIPTION"
  fi
  echo
}

    if [[ -d "$_PROJECT_DIR" && $(cd "$_PROJECT_DIR"; git rev-parse --git-dir 2>/dev/null) ]]; then


      repo_name=$(basename "$_PROJECT_DIR" .git)

      notify-send "Checking dir:" "$_PROJECT_DIR"
      cd "$_PROJECT_DIR"

      # changes=$(git fetch 2>&1 | grep -F -- '->' | sed 's/^ [+*=!-] //')
      changes=$(git fetch | grep -F -- '->' | sed 's/^ [+*=!-] //')
d3bug info "repoooo $changes"
      while read -r line; do
        case $line in
          *..*)
            commit_range=$(echo "$line" | awk '{ print $1 }')
            branch_name=$(echo "$line" | awk '{ print $2 }')
            commit_messages=$(git log $commit_range --pretty=format:'%s (%an)')
            suriUpdateNotify "New commits in $repo_name/$branch_name" "$commit_messages"
            ;;
          *new\ branch*)
            branch_name=$(echo "$line" | awk '{ print $3 }')
            suriUpdateNotify "New branch $repo_name/$branch_name" ""
            ;;
          *new\ tag*)
            tag_name=$(echo "$line" | awk '{ print $3 }')
            suriUpdateNotify "New tag $repo_name/$tag_name" ""
            ;;
        esac
      done <<< "$changes"

      cd - &>/dev/null
    fi
	notify-send "Done"
